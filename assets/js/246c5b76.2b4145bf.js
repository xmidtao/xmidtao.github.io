"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[4755],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2472:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var a=n(3117),i=n(102),r=(n(7294),n(3905)),l=["components"],o={id:"introduction",title:"State",sidebar_label:"Introduction",slug:"/core/state"},s=void 0,d={unversionedId:"packages/core/api/state/introduction",id:"packages/core/api/state/introduction",title:"State",description:"A State represents a piece of Information that we need to remember globally at a later point in time.",source:"@site/docs/packages/core/api/state/Introduction.md",sourceDirName:"packages/core/api/state",slug:"/core/state",permalink:"/docs/core/state",editUrl:"https://github.com/xmidtao/documentation/tree/main/docs/packages/core/api/state/Introduction.md",tags:[],version:"current",lastUpdatedAt:1692714783,formattedLastUpdatedAt:"8/22/2023",frontMatter:{id:"introduction",title:"State",sidebar_label:"Introduction",slug:"/core/state"},sidebar:"docs",previous:{title:"Methods",permalink:"/docs/core/agile-instance/methods"},next:{title:"Properties",permalink:"/docs/core/state/properties"}},p=[{value:"\ud83d\udd28 Use case",id:"-use-case",children:[],level:3},{value:"\u26f3\ufe0f Sandbox",id:"\ufe0f-sandbox",children:[],level:3},{value:"\ud83d\udc5f Light State",id:"-light-state",children:[{value:"Methods contained in the <code>Light State</code>",id:"methods-contained-in-the-light-state",children:[],level:4}],level:2},{value:"\ud83c\udfcb\ufe0f Enhanced State",id:"\ufe0f-enhanced-state",children:[],level:2},{value:"\ud83d\udced Props",id:"-props",children:[{value:"<code>initialValue</code>",id:"initialvalue",children:[],level:3},{value:"<code>config</code>",id:"config",children:[{value:"<code>key</code>",id:"key",children:[],level:4},{value:"<code>dependents</code>",id:"dependents",children:[],level:4},{value:"<code>isPlaceholder</code>",id:"isplaceholder",children:[],level:4}],level:3}],level:2},{value:"\ud83d\udfe6 Typescript",id:"-typescript",children:[],level:2}],c={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," represents a piece of Information that we need to remember globally at a later point in time.\nWhile offering a toolkit to use and mutate this piece of Information.\nStates are the foundation of AgileTs. Almost everything depends on States or extends its functionalities.\nFor example, a ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/collection"},"Collection")," is a dynamic set of States.\nAll you need to instantiate a State, is to call ",(0,r.kt)("inlineCode",{parentName:"p"},"createState()")," and specify an initial value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// String State\nconst NAME = createState(\"Jeff\");\n\n// Number State\nconst AGE = createState(18);\n\n// Array State\nconst SPECIAL_POWERS = createState(['water', 'dirt']);\n\n// Nested State\nconst FRIENDS = createState({friendA: FRIEND_STATE_A, friendB: FRIEND_STATE_B}); \n\n// A light alternative to 'createState()' without bells and whistles like 'undo()', 'persist()', ...\nconst USER = createLightState({id: 10, name: 'jeff'})\n")),(0,r.kt)("p",null,"We can create as many States as we need and bind them flexible to any UI-Component.\nNow that we have instantiated some States, we can dynamically and easily manipulate their value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Update the State value to 'Frank'\nNAME.set(\"Frank\");\n\n// Undo latest State value change (-> value is now \"Jeff\" again)\nNAME.undo();\n\n// Merge 'friendC' into the FIRENDS State value object\nFRIENDS.patch({friendC: FIREND_STATE_C});\n\n// Permanently store the State value in an external Storage\nNAME.persist();\n\n// Check if the State value is equal to '['water', 'dirt']'\nSPECIAL_POWERS.is(['water', 'dirt']); // Returns true\n")),(0,r.kt)("p",null,"Want to learn more about the State's specific methods?\nCheck out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/state/methods"},"State Methods")," documentation.\nMost methods we use to modify, mutate and access the State are chainable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'MY_STATE.undo().set("Hello Hell").watch(() => {}).reset().invert().persist().type(String);\n')),(0,r.kt)("h3",{id:"-use-case"},"\ud83d\udd28 Use case"),(0,r.kt)("p",null,"We might use a State to remember the active theme of our application,\nor the ",(0,r.kt)("inlineCode",{parentName:"p"},"userId")," of the current logged-in user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const THEME_TYPE = createState("dark");\n// <- toggled theme switch\nTHEME_TYPE.set("light");\n')),(0,r.kt)("p",null,"In the above example, we create a ",(0,r.kt)("inlineCode",{parentName:"p"},"THEME_TYPE"),' State with the initial value "dark".\nAfter toggling the theme switch, we update the ',(0,r.kt)("inlineCode",{parentName:"p"},"THEME_TYPE"),' to "light".'),(0,r.kt)("h3",{id:"\ufe0f-sandbox"},"\u26f3\ufe0f Sandbox"),(0,r.kt)("p",null,"Test the State yourself. It's only one click away. Just select your preferred Framework below."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-first-state-f12cz"},"React")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://snack.expo.io/@bennodev/agilets-first-state"},"React-Native")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-first-state-i5xxs"},"Vue"))),(0,r.kt)("h2",{id:"-light-state"},"\ud83d\udc5f Light State"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Light State")," is a lightweight alternative to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Enhanced State"),",\nwhich is referred as the 'normal' State in this documentation.\nIt is the State in its rawest and lightest form.\nThus, it is recommended when no additional functionalities\nlike ",(0,r.kt)("inlineCode",{parentName:"p"},"persist()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"watch()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"undo()"),", .. are required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"new State(agileInstance, initialValue, config);\n// or \ncreateLightState(initialValue, config);\n")),(0,r.kt)("h4",{id:"methods-contained-in-the-light-state"},"Methods contained in the ",(0,r.kt)("inlineCode",{parentName:"h4"},"Light State")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setKey()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ingest()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"addSideEffect()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"removeSideEffect()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hasSideEffect()"))),(0,r.kt)("h2",{id:"\ufe0f-enhanced-state"},"\ud83c\udfcb\ufe0f Enhanced State"),(0,r.kt)("p",null,"What we refer as a 'normal' State in this documentation is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Enhanced State"),".\nActually the ",(0,r.kt)("inlineCode",{parentName:"p"},"Enhanced State")," is an extension of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Light State")," (normal State)\nwith many additional features.\nSince the ",(0,r.kt)("inlineCode",{parentName:"p"},"Enhanced State")," is the most commonly used type of State,\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"createState()")," method creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"Enhanced State"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"new EnhancedState(agileInstance, initialValue, config);\n// or \ncreateState(initialValue, config);\n// or \ncreateEnhancedState(initialValue, config);\n")),(0,r.kt)("p",null,"However, since the ",(0,r.kt)("inlineCode",{parentName:"p"},"Enhanced State")," is bloated with features,\nit requires a larger bundle size than the ",(0,r.kt)("inlineCode",{parentName:"p"},"Light State"),"."),(0,r.kt)("h2",{id:"-props"},"\ud83d\udced Props"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Enhanced State\nnew EnhancedState(agileInstance, initialValue, config);\n// or \ncreateState(initialValue, config);\n// or \ncreateEnhancedState(initialValue, config);\n\n// Light State\nnew State(agileInstance, initialValue, config);\n// or \ncreateLightState(initialValue, config);\n")),(0,r.kt)("h3",{id:"initialvalue"},(0,r.kt)("inlineCode",{parentName:"h3"},"initialValue")),(0,r.kt)("p",null,"The first ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," assigned to the State."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1}","{1}":!0},"const MY_STATE = createState(\"hello there\");\nMY_STATE.value; // Returns 'hello there'\n")),(0,r.kt)("p",null,"Later we can access the initial value with the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialStateValue")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"MY_STATE.initialStateValue; // Returns 'hello there'\n")),(0,r.kt)("h3",{id:"config"},(0,r.kt)("inlineCode",{parentName:"h3"},"config")),(0,r.kt)("p",null,"Beside the initial value a ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," takes an optional configuration object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createState("myInitialValue", {\n    key: "myKey",\n    dependents: [MY_STATE_2]\n});\n')),(0,r.kt)("p",null,"Here is a Typescript Interface for quick reference. However,\neach property is explained in more detail below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export interface StateConfigInterface {\n    key?: StateKey;\n    dependents?: Array<Observer>;\n    isPlaceholder?: boolean;\n}\n")),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"key"},(0,r.kt)("inlineCode",{parentName:"h4"},"key")),(0,r.kt)("p",null,"The optional property ",(0,r.kt)("inlineCode",{parentName:"p"},"key/name")," should be a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"string/number")," to identify the State later."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createState("myInitialValue", {\n    key: "myKey"\n});\n')),(0,r.kt)("p",null,"We recommend giving each State a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," since it has only advantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"helps us during debug sessions"),(0,r.kt)("li",{parentName:"ul"},"makes it easier to identify the State"),(0,r.kt)("li",{parentName:"ul"},"no need for separate persist Key")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string \\| number")),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"dependents"},(0,r.kt)("inlineCode",{parentName:"h4"},"dependents")),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udd25"),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This property is mainly thought for the internal use."))),(0,r.kt)("p",null,"Specifies which States depend on this State."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createState("myInitialValue", {\n    dependents: [MY_STATE_2]\n});\n')),(0,r.kt)("p",null,"So if this State mutes and is ingested into the ",(0,r.kt)("inlineCode",{parentName:"p"},"runtime"),",\nthe depending States are ingested into the ",(0,r.kt)("inlineCode",{parentName:"p"},"runtime")," too."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Array<Observer>")),(0,r.kt)("td",{parentName:"tr",align:null},"[]"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"isplaceholder"},(0,r.kt)("inlineCode",{parentName:"h4"},"isPlaceholder")),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udd25"),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This property is mainly thought for the internal use."))),(0,r.kt)("p",null,"Defines whether the State is a ",(0,r.kt)("inlineCode",{parentName:"p"},"placeholder"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const MY_STATE = createState("myInitialValue", {\n    isPlaceholder: true\n});\n\nMY_STATE.exists(); // false\n')),(0,r.kt)("p",null,"States are, for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"placeholder")," when AgileTs needs to hold a reference to them,\neven though they aren't instantiated yet."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h2",{id:"-typescript"},"\ud83d\udfe6 Typescript"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"State Class")," is almost 100% typesafe and takes an optional generic type for type safety of its ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1}","{1}":!0},'const MY_STATE = createState<string>("Hello World");\nMY_STATE.set(1); // Error\nMY_STATE.set("hello space"); // Success\n')))}u.isMDXComponent=!0}}]);