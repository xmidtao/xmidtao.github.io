"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[4133],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||a;return n?o.createElement(h,r(r({ref:t},p),{},{components:n})):o.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var d=2;d<a;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1976:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var o=n(3117),i=n(102),a=(n(7294),n(3905)),r=["components"],s={id:"style-guide",title:"Style Guides",sidebar_label:"Style Guides",slug:"/style-guide",description:"Contributions to AgileTs can be made with little effort and are very welcome. We look forward to your input.",image:"img/meta.png"},l=void 0,d={unversionedId:"main/style-guide",id:"main/style-guide",title:"Style Guides",description:"Contributions to AgileTs can be made with little effort and are very welcome. We look forward to your input.",source:"@site/docs/main/StyleGuides.md",sourceDirName:"main",slug:"/style-guide",permalink:"/docs/style-guide",editUrl:"https://github.com/xmidtao/documentation/tree/develop/docs/main/StyleGuides.md",tags:[],version:"current",lastUpdatedAt:1689143748,formattedLastUpdatedAt:"7/12/2023",frontMatter:{id:"style-guide",title:"Style Guides",sidebar_label:"Style Guides",slug:"/style-guide",description:"Contributions to AgileTs can be made with little effort and are very welcome. We look forward to your input.",image:"img/meta.png"},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Frameworks",permalink:"/docs/frameworks"}},p=[{value:"\ud83d\ude80 Inspiration 1",id:"-inspiration-1",children:[{value:"\ud83d\udda5\ufe0f Example Application",id:"\ufe0f-example-application",children:[],level:4},{value:"\ud83c\udff0 Structure",id:"-structure",children:[],level:4},{value:"\ud83d\udcdd store.ts",id:"-storets",children:[],level:3}],level:2},{value:"\ud83d\ude80 Inspiration 2",id:"-inspiration-2",children:[{value:"\ud83d\udda5\ufe0f ExampleApplications",id:"\ufe0f-exampleapplications",children:[],level:4},{value:"\ud83c\udff0 Structure",id:"-structure-1",children:[],level:4}],level:2},{value:"\ud83d\udcc1 api",id:"1-api",children:[{value:"\ud83d\udcdd index.ts",id:"-indexts",children:[],level:3}],level:2},{value:"\ud83d\udcc1 entities",id:"1-entities",children:[{value:"\ud83d\udcdd index.ts",id:"-indexts-1",children:[],level:3},{value:"\ud83d\udcdd .actions.ts",id:"1-actionsts",children:[],level:3},{value:"\ud83d\udcdd .controller.ts",id:"1-controllerts",children:[],level:3},{value:"\ud83d\udcdd .interfaces.ts",id:"-interfacests",children:[],level:3},{value:"\ud83d\udcdd .routes.ts",id:"1-routests",children:[],level:3}],level:2},{value:"\ud83d\udcdd index.ts",id:"-indexts-2",children:[],level:2},{value:"\ud83d\ude80 Inspiration 3",id:"-inspiration-3",children:[],level:2}],c={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A good frontend architecture isn't installable via npm\nand even AgileTs cannot solve this problem on the go.\nPlanning and building a well-structured application requires a lot of time and effort.\nAt the beginning, it may not seem appealing to invest time in a good structure\nas it will prevent you from getting everything up and running as quickly as possible.\nHowever, a clear structure and consistent plan\nsaves you a lot of headache and will certainly pay of in the end.\nYou'll be able to better plan for scaling, avoid unnecessary refactoring sessions\nand understand the app hierarchy without having to re-learn every component or service\nevery time you need to update existing code for a new feature."),(0,a.kt)("p",null,"So how does a good structured application looks like?\nWell that depends on many factors and to be honest there exists no right or wrong.\nEvery developer is an individual\nthat has different code styles and visions for their application."),(0,a.kt)("p",null,"In order not to leave you completely in the dark\nand to give you some inspiration, we have prepared some ",(0,a.kt)("inlineCode",{parentName:"p"},"Style Guides"),".\nThese guides give you a basic idea of possible structures for frontend applications\nusing AgileTs as State Management Framework.\nFeel free to choose one of them and adapt it to your needs."),(0,a.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},"\u2757\ufe0f"),"important")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"AgileTs isn't bound to any specific Style-Guide"),",\nbut there are some you may get inspired from."))),(0,a.kt)("h2",{id:"-inspiration-1"},"\ud83d\ude80 Inspiration 1"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Style Guide 1")," is intended for ",(0,a.kt)("strong",{parentName:"p"},"smaller and medium size applications"),"\nwith about ",(0,a.kt)("inlineCode",{parentName:"p"},"1-3")," entities. (In AgileTs, ",(0,a.kt)("inlineCode",{parentName:"p"},"entities")," are things with distinct\nand independent existence like users, posts, or todos.)\nWe put everything related to these entities\ninto a single file of truth called ",(0,a.kt)("inlineCode",{parentName:"p"},"store.js")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"core.js"),".\nIn the end, the ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," file contains all the business logic of your application,\nmeaning all the global ",(0,a.kt)("inlineCode",{parentName:"p"},"states")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"actions"),"."),(0,a.kt)("p",null,"If your application scales over time and has more than ",(0,a.kt)("inlineCode",{parentName:"p"},"1-3")," entities,\nwe don't recommend using this Style Guide\nas it gets a mess to put everything into a single file of truth."),(0,a.kt)("h4",{id:"\ufe0f-example-application"},"\ud83d\udda5\ufe0f Example Application"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-simple-todo-list-glmc4"},"Simple Todo List"))),(0,a.kt)("h4",{id:"-structure"},"\ud83c\udff0 Structure"),(0,a.kt)("p",null,"The Style Guide builds on the single source of truth principle.\nThus, it has a single source of truth file called ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts"),"\nat the top-level of the ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder besides the UI-Components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'{3} title="MyApp"',"{3}":!0,title:'"MyApp"'},"my-app\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 store.ts\n\u2502   \u2514\u2500\u2500 ui\n.\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts")," file is, so to say, the brain of your application and contains all business logic\nand logic, in general, that isn't explicitly bound to a UI-Component.\nThis outsourcing of our logic makes our code more decoupled,\nportable, and above all, easily testable."),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts")," file of a simple TODO application to illustrate visually\nhow it can be constructed."),(0,a.kt)("h3",{id:"-storets"},"\ud83d\udcdd store.ts"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"store.ts")," file, we instantiate all ",(0,a.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instances")," (",(0,a.kt)("inlineCode",{parentName:"p"},"MY_TODOS"),"),\ndefine all actions (",(0,a.kt)("inlineCode",{parentName:"p"},"updateTodo()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"toogleTodo()"),", ..)\nand if you are using Typescript interfaces (",(0,a.kt)("inlineCode",{parentName:"p"},"TodoInterface"),") are located here too."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="store.ts"',title:'"store.ts"'},'import { createCollection } from "@agile-ts/core";\n\nexport interface TodoItemInterface {\n  id: number;\n  text: string;\n  done: boolean;\n}\n\n// Create Collection (a dynamic set of States)\nexport const MY_TODOS = createCollection<TodoItemInterface>({\n  key: "todos"\n}).persist(); // perist does store the Collection in the Local Storage\n\n// Update Todo action\nexport const updateTodo = (id: number, text: string): void => {\n  MY_TODOS.update(id, { text: text });\n};\n\n// Toggle Todo action\nexport const toggleTodo = (id: number): void => {\n  MY_TODOS.update(id, { done: true });\n};\n\n// Remove Todo action\nexport const removeTodo = (id: number): void => {\n  MY_TODOS.remove(id).everywhere();\n};\n\n// Add Todo action\nexport const addTodo = (text: string): void => {\n  MY_TODOS.collect(\n    {\n      id: randomId(),\n      text: text,\n      done: false\n    }\n  );\n};\n')),(0,a.kt)("p",null,"If you are wondering why we write AgileTs States uppercase.\nWell, it has a simple advantage.\nWe can easily differentiate between global and local States in our UI-Components."),(0,a.kt)("br",null),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"-inspiration-2"},"\ud83d\ude80 Inspiration 2"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Style Guide 2")," is intended for ",(0,a.kt)("strong",{parentName:"p"},"medium size and large applications"),"\nwith more than ",(0,a.kt)("inlineCode",{parentName:"p"},"3")," entities.\n(In AgileTs, ",(0,a.kt)("inlineCode",{parentName:"p"},"entities")," are things with distinct and independent existence like users, posts, or todos.)\nAt first glance, this way of organizing your application looks very boiler-late-ey.\nEach entity has its own directory with a bunch of files.\nHowever, there is a system behind it,\nthat will definitely improve the maintainability and scalability of your application.\nWe put everything related to the entities into a single folder of truth called ",(0,a.kt)("inlineCode",{parentName:"p"},"core"),".\nIn the end, the ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," folder contains all the business logic of your application,\nmeaning all the global ",(0,a.kt)("inlineCode",{parentName:"p"},"states")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"actions"),"."),(0,a.kt)("p",null,"This Style Guide can also be applied to smaller applications\nlike a simple todo app with ",(0,a.kt)("inlineCode",{parentName:"p"},"1-3")," entities.\nIndeed, this might be an overkill and brings no added value at the beginning,\nhowever it makes your application pretty scalable\nin case you do want to expand its functionalities later."),(0,a.kt)("h4",{id:"\ufe0f-exampleapplications"},"\ud83d\udda5\ufe0f ExampleApplications"),(0,a.kt)("p",null,"Currently, no open-source application uses this ",(0,a.kt)("inlineCode",{parentName:"p"},"Style Guide"),".\nHowever, I have personally worked with it in a medium-sized private repository with about ",(0,a.kt)("inlineCode",{parentName:"p"},"7")," entities,\nand it worked pretty well. "),(0,a.kt)("h4",{id:"-structure-1"},"\ud83c\udff0 Structure"),(0,a.kt)("p",null,"The Style Guide builds on the single source of truth principle.\nThus, it has a single source of truth folder called ",(0,a.kt)("inlineCode",{parentName:"p"},"core"),"\nat the top-level of the ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder besides the UI-Components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'{3} title="MyApp"',"{3}":!0,title:'"MyApp"'},"my-app\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 core\n\u2502   \u2514\u2500\u2500 ui\n.\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," is the brain of your application and contains all business logic\nand logic in general that isn't explicitly bound to a UI-Component.\nThis outsourcing of our logic makes our code more decoupled,\nportable, and above all, easily testable."),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," of a simple TODO application to visually illustrate how such a ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," can be constructed.\nOur todo application has two main ",(0,a.kt)("a",{parentName:"p",href:"#1-entities"},"entities"),", which a State Manager like AgileTs should handle.\nThe ",(0,a.kt)("strong",{parentName:"p"},"User")," entity and of course, the ",(0,a.kt)("strong",{parentName:"p"},"TODO-Item")," entity. These two entities are mapped in our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," folder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodoList-Core"',title:'"TodoList-Core"'},"core\n\u2502\u2500\u2500 api\n\u2502   \u251c\u2500\u2500 index.ts\n\u2502\u2500\u2500 entities\n\u2502  \u2514\u2500\u2500 todo\n\u2502  |    \u251c\u2500\u2500 index.ts\n\u2502  |    \u2514\u2500\u2500 todo.actions.ts\n|  |    \u2514\u2500\u2500 todo.controller.ts\n|  |    \u2514\u2500\u2500 todo.interfaces.ts\n|  |    \u2514\u2500\u2500 todo.routes.ts\n\u2502  \u2514\u2500\u2500 user\n\u2502       \u251c\u2500\u2500 index.ts\n\u2502       \u2514\u2500\u2500 user.actions.ts\n|       \u2514\u2500\u2500 user.controller.ts\n|       \u2514\u2500\u2500 user.interfaces.ts\n|       \u2514\u2500\u2500 user.routes.ts\n|\u2500\u2500 index.ts\n.\n")),(0,a.kt)("p",null,"Each property you find in the above folder structure of the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList-Core"),",\nis described in detail below \u2b07\ufe0f."),(0,a.kt)("h2",{id:"1-api"},"\ud83d\udcc1 api"),(0,a.kt)("p",null,"Our Todo-List app has to communicate to a ",(0,a.kt)("inlineCode",{parentName:"p"},"backend"),",\nin order authenticate the user and permanently remember todos.\nTherefore, we need something that communicates with our server\nand allows the easy creation of http/s requests.\nIn this example, we use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api"},"AgileTs API"),",\nbut you can use whatever you prefer.\nIf your application doesn't need to communicate to a ",(0,a.kt)("inlineCode",{parentName:"p"},"backend"),",\nyou can entirely skip the ",(0,a.kt)("inlineCode",{parentName:"p"},"api")," part."),(0,a.kt)("h3",{id:"-indexts"},"\ud83d\udcdd index.ts"),(0,a.kt)("p",null,"To enable the creation of rest calls,\nwe initialize an API Instance in the ",(0,a.kt)("inlineCode",{parentName:"p"},"index.ts")," file of the ",(0,a.kt)("inlineCode",{parentName:"p"},"api")," folder.\nThe defined API Instance will then be mainly used\nin the ",(0,a.kt)("a",{parentName:"p",href:"#1-routests"},"route")," file of an ",(0,a.kt)("a",{parentName:"p",href:"#1-entities"},"entity"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},"import API from '@agile-ts/api';\n\nconst api = new API({\n    baseURL: 'http://localhost:5000',\n    timeout: 10000,\n    options: {\n        credentials: undefined,\n    },\n});\n\nexport default api;\n")),(0,a.kt)("h2",{id:"1-entities"},"\ud83d\udcc1 entities"),(0,a.kt)("p",null,"Our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," consists of several entities,\nwhich exist apart from each other, having their own independent existence.\nEach ",(0,a.kt)("inlineCode",{parentName:"p"},"entity")," manages its data separately by making rest calls or mutating its states.\nThis strict separation makes our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," more\nstructured, readable, and improves maintainability."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"For example:")," ",(0,a.kt)("br",null),"\nThe ",(0,a.kt)("em",{parentName:"p"},"User Entity")," should only treat the user's whole logic\nand shouldn't do rest calls for the ",(0,a.kt)("em",{parentName:"p"},"Todo-Item Entity"),"."),(0,a.kt)("h3",{id:"-indexts-1"},"\ud83d\udcdd index.ts"),(0,a.kt)("p",null,"Here we export all ",(0,a.kt)("a",{parentName:"p",href:"#1-actionsts"},"actions"),", ",(0,a.kt)("a",{parentName:"p",href:"#1-routests"},"routes"),", ",(0,a.kt)("a",{parentName:"p",href:"#1-interfacests"},"interfaces")," and\nthe ",(0,a.kt)("a",{parentName:"p",href:"#-controllerts"},"controller")," to properly import them in our UI-Layer later."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts in \ud83d\udcc1todo"',title:'"index.ts',in:!0,'\ud83d\udcc1todo"':!0},'import * as actions from "./todo.actions";\nimport * as controller from "./todo.controller";\nimport * as routes from "./todo.routes";\nimport * as interfaces from "./todo.interfaces";\n\nexport default {\n    ...actions,\n    ...controller,\n    ...routes,\n    ...interfaces,\n};\n')),(0,a.kt)("p",null,"In the UI-Layer the entity can then be imported and used like that:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import core from '../core';\n\n// Call create Todo action\ncore.todo.createTodo();\n\n// Retreive the 'TODOS' Collection\ncore.todo.TODOS;\n")),(0,a.kt)("h3",{id:"1-actionsts"},"\ud83d\udcdd .actions.ts"),(0,a.kt)("p",null,"All actions of an entity are defined in this file.\nIn general, an action modifies the application states,\nmakes rest calls (through the functions provided by the ",(0,a.kt)("a",{parentName:"p",href:"#1-routests"},"routes.ts")," file),\nand computes some values if necessary.\nIn principle, actions always happen in response to an event.\nFor example, when the ",(0,a.kt)("em",{parentName:"p"},"add todo button")," was pressed.\nThus, they should be called like action sounding names (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"createTodo")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"removeTodo"),")."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"For example:")," ",(0,a.kt)("br",null),"\nThe creation of a Todo-Item in the UI-Layer triggers the ",(0,a.kt)("inlineCode",{parentName:"p"},"addTodo()")," action,\nwhich then mutates our Todo Items State and makes a rest call to the backend."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo.actions.ts in \ud83d\udcc1todo"',title:'"todo.actions.ts',in:!0,'\ud83d\udcc1todo"':!0},"import {TodoInterface} from './todo.interfaces';\nimport {ADD_TODO} from './todo.routes';\nimport {TODOS} from './todo.controller';\n\nexport const addTodo = async (userId: string, description: string): Promise<void> => {\n    // Rest call to the backend\n    const response = await ADD_TODO({description: description, userId: userId});\n\n    // Add Todo to Collection\n    TODOS.collect(todo, userId);\n};\n\n// ..\n")),(0,a.kt)("h3",{id:"1-controllerts"},"\ud83d\udcdd .controller.ts"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"controller.ts")," manages\nand contains the ",(0,a.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instances")," for an entity.\nThese Agile Sub Instances can and should then only be modified by the actions (",(0,a.kt)("a",{parentName:"p",href:"#1-actionsts"},"actions.ts"),")\nor bound to UI-Components in the UI-Layer for reactivity."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo.controller.ts in \ud83d\udcc1todo"',title:'"todo.controller.ts',in:!0,'\ud83d\udcc1todo"':!0},"import {createCollection, createComputed} from \"@agile-ts/core\";\nimport {TodoInterface} from './todo.interfaces';\nimport {CURRENT_USER} from '../user'\n\n// Contains all existing TODO's\nexport const TODOS = createCollection<TodoInterface>()();\n\n// Contains all TODO's that belong to the current logged in USER\nexport const USER_TODOS = createComputed(() => {\n    return TodosCollection.getGroup(CURRENT_USER.value.id).output;\n});\n")),(0,a.kt)("p",null,"If you are wondering why we write AgileTs States uppercase.\nWell, it has a simple advantage.\nWe can easily differentiate between global and local States in our UI-Components."),(0,a.kt)("h3",{id:"-interfacests"},"\ud83d\udcdd .interfaces.ts"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},"\u2139\ufe0f"),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"interfaces")," section can be ignored by non ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"Typescript")," users!"))),(0,a.kt)("p",null,"If you are familiar with ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"Typescript"),",\nyou properly want to create some interfaces for your entity,\nand the surrounding things like actions or routes.\nThese interfaces belonging to the entity should be defined here."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"For example")," ",(0,a.kt)("br",null),"\nIn the case of the TODO-Entity, it contains the ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoInterface"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo.interfaces.ts in \ud83d\udcc1todo"',title:'"todo.interfaces.ts',in:!0,'\ud83d\udcc1todo"':!0},"export interface TodoInterface {\n    id: string\n    userId: string\n    description: string\n    creationDate: string\n}\n\ninterface AddTodoPayloadInterface {\n    description: string,\n    userId: string\n}\n\n// ..\n")),(0,a.kt)("h3",{id:"1-routests"},"\ud83d\udcdd .routes.ts"),(0,a.kt)("p",null,"In order to communicate to our backend,\nwe create some ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Representational_state_transfer"},"rest calls"),".\nFor better maintainability, these rest calls are outsourced\nfrom the ",(0,a.kt)("a",{parentName:"p",href:"#1-actionsts"},"actions.ts")," file and provided by this file in function shape.\nThese route functions should only be used in the ",(0,a.kt)("a",{parentName:"p",href:"#1-actionsts"},"actions")," of the entity.\nIt's not recommended calling them from outside the corresponding entity."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todo.routes.ts in \ud83d\udcc1todo"',title:'"todo.routes.ts',in:!0,'\ud83d\udcc1todo"':!0},'import {TodoInterface, AddTodoPayloadInterface} from "./todo.interfaces";\nimport api from "../../api";\n\nexport const ADD_TODO = async (payload: AddTodoPayloadInterface): Promise<TodoInterface> => {\n    const response = await api.post(\'todos\', payload);\n    return response.data.body.todo;\n}\n\n// ..\n')),(0,a.kt)("h2",{id:"-indexts-2"},"\ud83d\udcdd index.ts"),(0,a.kt)("p",null,"Here we export our ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," entities, so that each entity\ncan be reached without any detours in the UI-Layer.\nIn a UI-Component we can then simply import the ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," 'package'\nand mutate its entities as wished without further thinking.\nFor example when we want to add a Todo-Item to the TODO Collection\nwe simply call ",(0,a.kt)("inlineCode",{parentName:"p"},"core.todo.addTodo(/* new todo */);"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},'import todo from "./entities/todo";\nimport user from "./entities/user";\nimport {globalBind} from "@agile-ts/core";\n\nconst core = {\n    todo,\n    user,\n};\n\n// For better debugging we bind the core globally \n// !! Don\'t do that in PRODUCTION !!\nglobalBind("__core__", core);\n\nexport default core;\n')),(0,a.kt)("br",null),(0,a.kt)("hr",null),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"-inspiration-3"},"\ud83d\ude80 Inspiration 3"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},"\u2139\ufe0f"),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"There is no third Inspiration Guide yet.\nIt does not have to be like this forever.\nFeel free to share your own ",(0,a.kt)("inlineCode",{parentName:"p"},"Style Guide")," inspiration here.\nEvery contribution is welcome. \ud83d\ude00"))))}u.isMDXComponent=!0}}]);