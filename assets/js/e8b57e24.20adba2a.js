"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[4983],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=l,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9258:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=n(3117),l=n(102),r=(n(7294),n(3905)),o=["components"],i={id:"introduction",title:"Collection",sidebar_label:"Introduction",slug:"/core/collection"},c=void 0,s={unversionedId:"packages/core/api/collection/introduction",id:"packages/core/api/collection/introduction",title:"Collection",description:"A Collection represents a reactive set of Information",source:"@site/docs/packages/core/api/collection/Introduction.md",sourceDirName:"packages/core/api/collection",slug:"/core/collection",permalink:"/docs/core/collection",editUrl:"https://github.com/xmidtao/documentation/tree/main/docs/packages/core/api/collection/Introduction.md",tags:[],version:"current",lastUpdatedAt:1689702448,formattedLastUpdatedAt:"7/18/2023",frontMatter:{id:"introduction",title:"Collection",sidebar_label:"Introduction",slug:"/core/collection"},sidebar:"docs",previous:{title:"Methods",permalink:"/docs/core/state/methods"},next:{title:"Methods",permalink:"/docs/core/collection/methods"}},p=[{value:"\ud83d\udc7e Advantages over Array States",id:"-advantages-over-array-states",children:[],level:3},{value:"\ud83d\udd28 Use case",id:"-use-case",children:[],level:3},{value:"\u26f3\ufe0f Sandbox",id:"\ufe0f-sandbox",children:[],level:3},{value:"\ud83d\uddc2\ufe0f Collection Classes",id:"\ufe0f-collection-classes",children:[{value:"\ud83d\udd39 Item",id:"-item",children:[],level:3},{value:"\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 Group",id:"-group",children:[],level:3},{value:"\ud83d\udd2e Selector",id:"-selector",children:[],level:3}],level:2},{value:"\ud83d\udced Props",id:"-props",children:[{value:"<code>config</code>",id:"config",children:[{value:"<code>groups</code>",id:"groups",children:[],level:4},{value:"<code>selectors</code>",id:"selectors",children:[],level:4},{value:"<code>key</code>",id:"key",children:[],level:4},{value:"<code>primaryKey</code>",id:"primarykey",children:[],level:4},{value:"<code>defaultGroupKey</code>",id:"defaultgroupkey",children:[],level:4},{value:"<code>initialData</code>",id:"initialdata",children:[],level:4}],level:3}],level:2},{value:"\ud83d\udfe6 Typescript",id:"-typescript",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection")," represents a reactive ",(0,r.kt)("em",{parentName:"p"},"set")," of Information\nthat we need to remember globally at a later point in time.\nWhile offering a toolkit to use and mutate this ",(0,r.kt)("em",{parentName:"p"},"set")," of Information.\nIt is designed for arrays of ",(0,r.kt)("inlineCode",{parentName:"p"},"data objects")," following the same pattern.\nEach of these data objects requires a ",(0,r.kt)("strong",{parentName:"p"},"unique ",(0,r.kt)("inlineCode",{parentName:"strong"},"item key"))," to be correctly identified later.\nThink of a Collection like a database table,\nthat stores a data object once keyed by an id (",(0,r.kt)("inlineCode",{parentName:"p"},"item key"),").\nAll you need to instantiate a Collection, is to call ",(0,r.kt)("inlineCode",{parentName:"p"},"createCollection()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_COLLECTION = createCollection();\n")),(0,r.kt)("p",null,"We can create as many Collections as we need and bind them flexible to any UI-Component.\nNow that we have instantiated a Collection, we can dynamically and easily manipulate its value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Add new Item to the Collection\nMY_COLLECTION.collect({id: 1, name: \"jeff\"}); \n\n// Remove Item at id '1' from the Collection\nMY_COLLECTION.remove(1).everywhere(); \n\n// Permanently store the Collection value in an external Storage\nMY_COLLECTION.persist();\n\n// Reset the Collection to it's inital value\nMY_COLLECTION.reset(); \n")),(0,r.kt)("p",null,"Want to learn more about the Collection's specific methods?\nCheck out the ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/collection/methods"},"Collection Methods")," documentation.\nMost methods we use to modify, mutate and access the Collection are chainable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"MY_COLLECTION.collect({id: 1, name: \"jeff\"}).persist().removeGroup('myGroup').reset();\n")),(0,r.kt)("h3",{id:"-advantages-over-array-states"},"\ud83d\udc7e Advantages over Array States"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Data is stored and indexed by ",(0,r.kt)("inlineCode",{parentName:"li"},"item keys")),(0,r.kt)("li",{parentName:"ul"},"Each data collected is stored inside an extended\n",(0,r.kt)("a",{parentName:"li",href:"/docs/core/state"},"State Instance")," called ",(0,r.kt)("a",{parentName:"li",href:"#-item"},"Item")),(0,r.kt)("li",{parentName:"ul"},"Efficient persisting of Collection data in an external Storage (e.g. Local Storage)"),(0,r.kt)("li",{parentName:"ul"},"Easily categorization of data by ",(0,r.kt)("inlineCode",{parentName:"li"},"item keys")," with help of ",(0,r.kt)("a",{parentName:"li",href:"#-groupgroupintroductionmd"},"Groups")),(0,r.kt)("li",{parentName:"ul"},"Selection of a single Item via an ",(0,r.kt)("inlineCode",{parentName:"li"},"item key")," with a ",(0,r.kt)("a",{parentName:"li",href:"#-selectorselectorintroductionmd"},"Selector")),(0,r.kt)("li",{parentName:"ul"},"Performant (\u26a0\ufe0f getting there, currently it can handle ",(0,r.kt)("inlineCode",{parentName:"li"},"~ 500 ops/sec")," in a ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/agile-ts/agile/tree/master/benchmark"},"1000 Fields List"),")")),(0,r.kt)("h3",{id:"-use-case"},"\ud83d\udd28 Use case"),(0,r.kt)("p",null,"We might use a Collection to remember a flexible and reactive array of todo objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const TODOS = createCollection();\n// <- add todos\nTODOS.collect({id: 1, todo: "Clean bathroom"}, ["user1"]);\nTODOS.collect({id: 2, todo: "Write Agile docs"},  ["user1"]);\n// <- cleaned bathroom\nTODOS.remove(1).everywhere();\n')),(0,r.kt)("p",null,"In the example above, we create an empty ",(0,r.kt)("inlineCode",{parentName:"p"},"TODO")," Collection.\nAfter the instantiation, we add two todo items to the Collection\nand specify that both todo items remain to the ",(0,r.kt)("inlineCode",{parentName:"p"},"user1")," ",(0,r.kt)("a",{parentName:"p",href:"#-groupgroupintroductionmd"},"Group"),".\nWe do that to keep track of which todo relates to which user.\nNow that we ",(0,r.kt)("inlineCode",{parentName:"p"},"cleaned our bathroom")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"user1"),",\nwe remove the todo related to the id ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," from the Collection and all Groups (-> everywhere)."),(0,r.kt)("h3",{id:"\ufe0f-sandbox"},"\u26f3\ufe0f Sandbox"),(0,r.kt)("p",null,"Test the Collection yourself. It's only one click away. Just select your preferred Framework below."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-first-collection-uyi9g"},"React")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codesandbox.io/s/agilets-first-state-i5xxs"},"Vue"))),(0,r.kt)("h2",{id:"\ufe0f-collection-classes"},"\ud83d\uddc2\ufe0f Collection Classes"),(0,r.kt)("p",null,"A Collection consists of several classes,\nall of which play an essential role."),(0,r.kt)("h3",{id:"-item"},"\ud83d\udd39 Item"),(0,r.kt)("p",null,"Each data object collected (for example, via the ",(0,r.kt)("inlineCode",{parentName:"p"},"collect()")," method)\nis stored inside an extended ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/state"},"State Instance")," called ",(0,r.kt)("inlineCode",{parentName:"p"},"Item"),".\nAll Items reside in a single source of truth ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," object in the Collection.\nTo avoid redundancy, these Items of the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," object\nare only accessed and cached by internal classes when needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="data object"',title:'"data','object"':!0},"{\n  99: Item(99) // has value '{id: 99, name: \"frank\"}'\n  1: Item(1)  // has value '{id: 1, name: \"jeff\"}'\n  2: Item(2) // has value '{id: 2, name: \"hans\"}'\n}\n")),(0,r.kt)("p",null,"Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"Item")," is an extension of the State,\nit provides the same powerful functionalities as a normal State."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Collect Data\nMY_COLLECTION.collect({id: 1, name: \"jeff\"}); \n\n// Get Item at itemKey '1'\nconst myItem = MY_COLLECTION.getItem(1); // Returns Item at primaryKey '1'\nconsole.log(myItem.value); // Returns '{id: 1, name: \"jeff\"}'\n\n// Update property 'name' in Item\nmyItem.patch({name: \"frank\"});\n\n// Undo latest Item value change\nmyItem.undo(); \n")),(0,r.kt)("h3",{id:"-group"},"\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 ",(0,r.kt)("a",{parentName:"h3",href:"/docs/core/collection/group"},"Group")),(0,r.kt)("p",null,"Often applications need to categorize and preserve the ordering of structured data.\nIn AgileTs, Groups are the cleanest way to do so.\nThey allow us to cluster together data from a Collection as an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"item keys"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const MY_GROUP = MY_COLLECTION.createGroup("groupName", [/* initial Items */]);\n')),(0,r.kt)("p",null,"A Group caches the Item values\nbased on the array of ",(0,r.kt)("inlineCode",{parentName:"p"},"item keys")," it represents,\nto avoid unnecessary recomputations.\nHowever, it does not manage or store these Items,\nthat is the job of the Collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"MY_GROUP.output; // Cached Item values\n")),(0,r.kt)("p",null,"Also, Groups are an extension of the ",(0,r.kt)("inlineCode",{parentName:"p"},"State Class"),"\nand offer the same powerful functionalities as a normal State."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Undo latest Group value change\nMY_STATE.undo();\n\n// Reset Group to its intial Value\nMY_GROUP.reset();\n\n// Permanently store Group value in an external Storage\nMY_STATE.persist(); \n")),(0,r.kt)("h3",{id:"-selector"},"\ud83d\udd2e ",(0,r.kt)("a",{parentName:"h3",href:"/docs/core/collection/selector"},"Selector")),(0,r.kt)("p",null,"A Selector selects a single Item from a Collection by its ",(0,r.kt)("inlineCode",{parentName:"p"},"item key"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_SELECTOR = MY_COLLECTION.createSelector(/* to select primary Key */);\n")),(0,r.kt)("p",null,"Selectors are smart, they always keep in sync with the Collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Updates the value in the corresponding Item\n// and thus updates the cached value of the Selector.\nMY_SELECTOR.patch({name: "frank"}); \n')),(0,r.kt)("p",null,"You don't even have to worry about selecting not existing Items.\nIf you select an ",(0,r.kt)("inlineCode",{parentName:"p"},"item key")," that doesn't exist in the Collection yet,\nthe Selector will return ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),".\nHowever once the corresponding data is collected under that ",(0,r.kt)("inlineCode",{parentName:"p"},"item key"),",\nthe Selector will update seamlessly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Select not existing Item\nconst MY_SELECTOR = MY_COLLECTION.createSelector('id0');\nconsole.log(MY_SELECTOR.value); // Returns 'null'\n\n// Collect selected Item\nMY_COLLECTION.collect({id: 'id0', name: 'jeff'});\nconsole.log(MY_SELECTOR.value); // Returns '{id: 'id0', name: 'jeff'}'\n")),(0,r.kt)("h2",{id:"-props"},"\ud83d\udced Props"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"new Collection(agileInstance, config);\n// or \ncreateCollection(config);\n")),(0,r.kt)("h3",{id:"config"},(0,r.kt)("inlineCode",{parentName:"h3"},"config")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection")," takes an optional configuration object as its only parameter.\nThere are two different ways of configuring a Collection. Both have their advantages."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"1.")," The plain ",(0,r.kt)("em",{parentName:"p"},"object")," way, which is notorious for its ease of use.\nHere, we configure everything in a specific object. For instance, this makes the creation of Instances like Groups pretty straightforward.\nBut on the other hand, it gives us some limitations, since we aren't creating and configuring the Groups and Selectors on our own.\nThe Collection takes care of it instead."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"createCollection({\n  key: 'dummyCollection',\n  group: [\"dummyGroup\"]\n})\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"2.")," The ",(0,r.kt)("em",{parentName:"p"},"function")," way, where a function, which has the Collection as the first parameter, returns the configuration object.\nThis gives us more freedom in configuring Instances like Groups,\nbecause we have access to the Collection and can create them on our own."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createCollection((collection) => ({\n  key: \'dummyCollection\',\n  group: {\n     dummyGroup: collection.Group(["item1", "item2"])\n   }\n}))\n')))),(0,r.kt)("p",null,"Here is a Typescript Interface for quick reference. However,\neach property is explained in more detail below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CreateCollectionConfigInterface<DataType = DefaultItem> {\n  groups?: { [key: string]: Group<any> } | string[];\n  selectors?: { [key: string]: Selector<any> } | string[];\n  key?: CollectionKey;\n  primaryKey?: string;\n  defaultGroupKey?: GroupKey;\n  initialData?: Array<DataType>;\n}\n")),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"groups"},(0,r.kt)("inlineCode",{parentName:"h4"},"groups")),(0,r.kt)("p",null,"Our Collection's initial ",(0,r.kt)("a",{parentName:"p",href:"#-groupgroupintroductionmd"},"Groups")," are defined with this property's help.\nThere are two different ways of doing so.\nThe first one is to pass an Array of Group keys/names,\nwhere AgileTs takes care of the Group's creation and names them according to the passed keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createCollection({\n  groups: ["myGroup1", "myGroup2"]\n});\n')),(0,r.kt)("p",null,"The way mentioned above has some limitations, since we can't configure the Groups ourselves.\nFortunately, there is a second way where we have access to the Collection itself,\nand can define and configure the Groups on our own."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createCollection((collection) => ({\n  key: \'dummyCollection\',\n  group: {\n    myGroup1: collection.Group(["item1", "item2"], {/* some configuration */}),\n    myGroup2: collection.Group(["item5", "item2", "item6"])\n  }\n}));\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{ [key: string]: Group<DataType> }  \\| string[]")),(0,r.kt)("td",{parentName:"tr",align:null},"{}"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"selectors"},(0,r.kt)("inlineCode",{parentName:"h4"},"selectors")),(0,r.kt)("p",null,"Our Collection's initial ",(0,r.kt)("a",{parentName:"p",href:"#-selectorselectorintroductionmd"},"Selectors")," are defined with this property's help.\nAs with the ",(0,r.kt)("inlineCode",{parentName:"p"},"groups")," property, there are two different ways of doing so.\nThe first one is to pass an Array of Selector keys/names,\nwhere AgileTs takes care of the Selector's creation and names them according to the passed keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createCollection({\n  selectors: ["mySelector1", "mySelector2"]\n});\n')),(0,r.kt)("p",null,"The way mentioned above has some limitations, since we can't configure the Selectors ourselves.\nFortunately, there is a second way where we have access to the Collection itself,\nand can define and configure the Selectors on our own."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createCollection((collection) => ({\n  key: \'dummyCollection\',\n  selectors: {\n    mySelector1: collection.Selector("item1", {/* some configuration */}),\n    mySelector2: collection.Selector("item3")\n  }\n}));\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{ [key: string]: Selector<DataType> }  \\| string[]")),(0,r.kt)("td",{parentName:"tr",align:null},"{}"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"key"},(0,r.kt)("inlineCode",{parentName:"h4"},"key")),(0,r.kt)("p",null,"The optional property ",(0,r.kt)("inlineCode",{parentName:"p"},"key/name")," should be a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"string/number")," to identify the Collection later."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createCollection({\n  key: "myKey"\n});\n')),(0,r.kt)("p",null,"We recommend giving each Collection a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),", since it has only advantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"helps us during debug sessions"),(0,r.kt)("li",{parentName:"ul"},"makes it easier to identify the Collection"),(0,r.kt)("li",{parentName:"ul"},"no need for separate persist Key")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string \\| number")),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"primarykey"},(0,r.kt)("inlineCode",{parentName:"h4"},"primaryKey")),(0,r.kt)("p",null,"Defines which property's value in collected data is selected as ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey"),".\nBy default, it is ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"primaryKey")," identifies a specific Item and has to be part of each collected data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const MY_COLLECTION = createCollection({\n  primaryKey: "key"\n});\nMY_COLLECTION.collect({key: 1, name: "hans"});\n//                      ^\n//                      |\n// primary Key ----------\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string \\| number")),(0,r.kt)("td",{parentName:"tr",align:null},"'id'"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"defaultgroupkey"},(0,r.kt)("inlineCode",{parentName:"h4"},"defaultGroupKey")),(0,r.kt)("p",null,"Describes the ",(0,r.kt)("inlineCode",{parentName:"p"},"key/name")," of the default ",(0,r.kt)("a",{parentName:"p",href:"#-groupgroupintroductionmd"},"Group"),".\nBy default, it is ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createCollection({\n  defaultGroupKey: "allItemsOfCollectionKey"\n});\n')),(0,r.kt)("p",null,"The default Group represents all Items of the Collection."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string \\| number")),(0,r.kt)("td",{parentName:"tr",align:null},"'default'"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"initialdata"},(0,r.kt)("inlineCode",{parentName:"h4"},"initialData")),(0,r.kt)("p",null,"Here we can set the initial Data of our Collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'createCollection({\n  initialData: [{id: 1, name: "hans"}, {id: 2, name: "frank"}]\n});\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Array<DataType>")),(0,r.kt)("td",{parentName:"tr",align:null},"[]"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h2",{id:"-typescript"},"\ud83d\udfe6 Typescript"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection")," is almost 100% typesafe and takes an optional generic type for type safety\nthat has to be followed by each collected data object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{6}","{6}":!0},'interface UserInterface {\n  id: number,\n  name: string\n}\n\nconst MY_COLLECTION = createState<UserInterface>();\nMY_COLLECTION.collect({id: "invalidType", animal: "Lion"}); // type Error\nMY_COLLECTION.collect({id: 1, name: "hans"}); // Success\n')))}u.isMDXComponent=!0}}]);