"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[3136],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||l;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6899:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],o={id:"introduction",title:"Agile Instance",sidebar_label:"Introduction",slug:"/core/agile-instance"},s=void 0,p={unversionedId:"packages/core/api/agile-instance/introduction",id:"packages/core/api/agile-instance/introduction",title:"Agile Instance",description:"The Agile Class is the internal manager of AgileTs and should be unique to your application.",source:"@site/docs/packages/core/api/agile-instance/Introduction.md",sourceDirName:"packages/core/api/agile-instance",slug:"/core/agile-instance",permalink:"/docs/core/agile-instance",editUrl:"https://github.com/xmidtao/documentation/tree/develop/docs/packages/core/api/agile-instance/Introduction.md",tags:[],version:"current",lastUpdatedAt:1689143748,formattedLastUpdatedAt:"7/12/2023",frontMatter:{id:"introduction",title:"Agile Instance",sidebar_label:"Introduction",slug:"/core/agile-instance"},sidebar:"docs",previous:{title:"Testing",permalink:"/docs/core/guides/testing"},next:{title:"Properties",permalink:"/docs/core/agile-instance/properties"}},c=[{value:"\ud83e\udd1d <code>shared</code> Agile Instance",id:"-shared-agile-instance",children:[],level:2},{value:"\ud83d\udced Props",id:"-props",children:[{value:"<code>config</code>",id:"config",children:[{value:"<code>key</code>",id:"key",children:[],level:4},{value:"<code>logConfig</code>",id:"logconfig",children:[],level:4},{value:"<code>localStorage</code>",id:"localstorage",children:[],level:4},{value:"<code>waitForMount</code>",id:"waitformount",children:[],level:4},{value:"<code>bindGlobal</code>",id:"bindglobal",children:[],level:4},{value:"<code>autoIntegrate</code>",id:"autointegrate",children:[],level:4},{value:"<code>bucket</code>",id:"bucket",children:[],level:4}],level:3}],level:2},{value:"\ud83c\udf0e Where to instantiate?",id:"-where-to-instantiate",children:[],level:2},{value:"\ud83d\udfe6 Typescript",id:"-typescript",children:[],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," is the internal manager of AgileTs and should be unique to your application."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const App = new Agile();\n")),(0,l.kt)("p",null,"It can be seen as an interface to any external Storage,\nor the UI-Frameworks AgileTs is implemented in.\nAlso, contains it a job queue system for managing State mutations.\nEach ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Sub Instance")," (ASI) contains a reference to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class"),"\nand depends on its functionalities.\nFor reference, here are some ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Sub Instances")," (ASI)\ncreated with an instantiated ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Instance")," called ",(0,l.kt)("inlineCode",{parentName:"p"},"App"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/core/state"},"State"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},' const MY_STATE = new State(sharedAgileInstance, "Hello there");\n // equals to\n const MY_STATE = createState("Hello there");\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/core/collection"},"Collection"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_COLLECTION = new Collection(sharedAgileInstance);\n// equals to\nconst MY_COLLECTION = createCollection();\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/core/computed"},"Computed"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const MY_COMPUTED = new Computed(sharedAgileInstance, () => 'hello');\n// equals to\nconst MY_COMPUTED = createComputed(() => 'hello');\n")))),(0,l.kt)("p",null,"In summary the main tasks of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," are to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"queue ",(0,l.kt)("a",{parentName:"li",href:"/docs/introduction#agile-sub-instance"},(0,l.kt)("inlineCode",{parentName:"a"},"Agile Sub Instance")),"\nchanges in the ",(0,l.kt)("inlineCode",{parentName:"li"},"runtime")," to prevent race conditions"),(0,l.kt)("li",{parentName:"ul"},"update/rerender subscribed UI-Components through the provided Integrations\nsuch as the ",(0,l.kt)("a",{parentName:"li",href:"/docs/react"},"React Integration")),(0,l.kt)("li",{parentName:"ul"},"provide configuration object")),(0,l.kt)("h2",{id:"-shared-agile-instance"},"\ud83e\udd1d ",(0,l.kt)("inlineCode",{parentName:"h2"},"shared")," Agile Instance"),(0,l.kt)("p",null,"In most cases you won't come in direct contact with this hidden helper (Agile Instance),\nalthough everything depends on it.\nThat is due the fact that there exists a shared Agile Instance called ",(0,l.kt)("inlineCode",{parentName:"p"},"shared")," in the background.\nThe shared Instance allows the easy and straightforward creation of ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"ASI's"),",\nsuch as the State below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import {shared} from '@agile-ts/core';\n\nconst MY_STATE = createState('Created with shared Agile Instance');\n// equals to\nconst MY_STATE = new State(shared, 'Created with shared Agile Instance');\n")),(0,l.kt)("p",null,"This is sufficient in 90% of the cases.\nHowever, if you want to configure the Agile Instance in more detail,\nyou have to redefine it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const App = new Agile({/* many config options */});\n")),(0,l.kt)("p",null,"Once you have created your customized Agile Instance,\nwe recommend overwriting the ",(0,l.kt)("inlineCode",{parentName:"p"},"shared")," Agile Instance\nwith the newly created Agile Instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"assignSharedAgileInstance(App);\n")),(0,l.kt)("p",null,"Otherwise, there would exist two instances of Agile\nwhich is an unnecessary use of memory.\nAlso, is the straightforward creation of States based on the shared Agile Instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"createState('jeff'); // Uses the shared Agile Instance\ncreateState('jeff', {agileInstance: App}); // Uses the specified Agile Instance\n")),(0,l.kt)("h2",{id:"-props"},"\ud83d\udced Props"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile(config);\n")),(0,l.kt)("h3",{id:"config"},(0,l.kt)("inlineCode",{parentName:"h3"},"config")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," takes an optional configuration object as its only parameter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  key: 'main',\n  bindGlobal: true\n});\n")),(0,l.kt)("p",null,"Here is a Typescript Interface for quick reference. However,\neach property is explained in more detail below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CreateAgileConfigInterface {\n  waitForMount?: boolean;\n  bindGlobal?: boolean;\n  key?: AgileKey;\n  bucket?: boolean;\n}\n")),(0,l.kt)("h4",{id:"key"},(0,l.kt)("inlineCode",{parentName:"h4"},"key")),(0,l.kt)("p",null,"The optional property ",(0,l.kt)("inlineCode",{parentName:"p"},"key/name")," should be a unique ",(0,l.kt)("inlineCode",{parentName:"p"},"string/number")," to identify the Agile Instance later."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'new Agile({\n    key: "myKey"\n});\n')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"logconfig"},(0,l.kt)("inlineCode",{parentName:"h4"},"logConfig")),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udd25"),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"loggerConfig")," configuration option has been deprecated in the latest versions ",(0,l.kt)("inlineCode",{parentName:"p"},"^0.1.1"),"\nand is no longer available!"),(0,l.kt)("h3",{parentName:"div",id:"why"},"Why?"),(0,l.kt)("p",{parentName:"div"},"Optimizing ",(0,l.kt)("inlineCode",{parentName:"p"},"bundle size"),"."),(0,l.kt)("h3",{parentName:"div",id:"alternative"},"Alternative?"),(0,l.kt)("p",{parentName:"div"},"Now, ",(0,l.kt)("inlineCode",{parentName:"p"},"warnings")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"errors")," are logged in general.\nHowever, to configure the logging behavior of AgileTs more precisely\nan external package ",(0,l.kt)("a",{parentName:"p",href:"/docs/logger"},(0,l.kt)("inlineCode",{parentName:"a"},"@agile-ts/logger"))," is required."),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import {assignSharedLogger, createLogger, Logger} from '@agile-ts/logger';\n\nassignSharedLogger(createLogger({\n  level: Logger.level.DEBUG,\n  active: true,\n  timestamp: true\n}));\n")))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"localstorage"},(0,l.kt)("inlineCode",{parentName:"h4"},"localStorage")),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udd25"),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"localStorage")," configuration option has been deprecated in the latest versions ",(0,l.kt)("inlineCode",{parentName:"p"},"^0.2.0"),"\nand is no longer available!"),(0,l.kt)("h3",{parentName:"div",id:"why-1"},"Why?"),(0,l.kt)("p",{parentName:"div"},"Optimizing ",(0,l.kt)("inlineCode",{parentName:"p"},"tree shaking")," support."),(0,l.kt)("h3",{parentName:"div",id:"alternative-1"},"Alternative?"),(0,l.kt)("p",{parentName:"div"},"Now, the local storage is added by default.\nHowever, to configure this behavior,\nwe need to assign a custom shared ",(0,l.kt)("a",{parentName:"p",href:"/docs/core/storage"},(0,l.kt)("inlineCode",{parentName:"a"},"Storage Manger")),"."),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import {createStorageManager, assignSharedStorageManager} from "@agile-ts/core";\n\nconst storageManager = createStorageManager({ localStorage: false });\nassignSharedStorageManager(storageManager);\n')))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"waitformount"},(0,l.kt)("inlineCode",{parentName:"h4"},"waitForMount")),(0,l.kt)("p",null,"This flag declares whether AgileTs should wait until unmounted Components get mounted before trigger rerenders on them."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  waitForMount: false // default true\n});\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"bindglobal"},(0,l.kt)("inlineCode",{parentName:"h4"},"bindGlobal")),(0,l.kt)("p",null,"Whether the Agile Instance should be bound ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis"},"globally")," at the key ",(0,l.kt)("inlineCode",{parentName:"p"},"__agile__"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  bindGlobal: false // default false\n});\n")),(0,l.kt)("p",null,"A globally bound Agile Instance has some advantages:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If methods such as ",(0,l.kt)("inlineCode",{parentName:"li"},"useAgile()")," can't find any Agile Instance in the given Instances,\nthey fall back on the global Agile Instance."),(0,l.kt)("li",{parentName:"ul"},"You can simply access it in the console for debugging purpose.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"autointegrate"},(0,l.kt)("inlineCode",{parentName:"h4"},"autoIntegrate")),(0,l.kt)("p",null,"Whether external added Integrations are to integrate automatically into the Agile Instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  autoIntegrate: false // default true\n});\n")),(0,l.kt)("p",null,"For example, when the package ",(0,l.kt)("inlineCode",{parentName:"p"},"@agile-ts/react")," was installed,\nwhether to automatically integrate the ",(0,l.kt)("inlineCode",{parentName:"p"},"reactIntegration"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const App = new Agile({autoIntegrate: true});\n// React got automatically integrated into the Agile Instance\n\n// --\n\nconst App = new Agile({autoIntegrate: false});\n// React didn't get automatically integrated into the Agile Instance\n// -> We have to integrate it manually\nApp.integrate(reactIntegration);\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"bucket"},(0,l.kt)("inlineCode",{parentName:"h4"},"bucket")),(0,l.kt)("p",null,'Whether to put render events into "The bucket" of the browser,\nwhere all events are first put in wait for the UI thread\nto be done with whatever it\'s doing.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"new Agile({\n  bucket: false // default true\n});\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/9083594/call-settimeout-without-delay"},'Learn more about "The bucket".')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("h2",{id:"-where-to-instantiate"},"\ud83c\udf0e Where to instantiate?"),(0,l.kt)("p",null,"If you have decided to initialize an Agile Instance\nand don't want to use the ",(0,l.kt)("a",{parentName:"p",href:"#-shared-agile-instance"},(0,l.kt)("inlineCode",{parentName:"a"},"shared"))," one.\nYou can technically instantiate it anywhere.\nHowever, there are a few ",(0,l.kt)("a",{parentName:"p",href:"/docs/style-guide"},"Style Guides"),"\nwhich might help you with this decision."),(0,l.kt)("h2",{id:"-typescript"},"\ud83d\udfe6 Typescript"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Agile Class")," is almost 100% typesafe."))}u.isMDXComponent=!0}}]);