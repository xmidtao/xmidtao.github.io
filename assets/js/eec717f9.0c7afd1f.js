"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[8429],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return c}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=r.createContext({}),o=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=o(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=o(t),c=l,f=m["".concat(u,".").concat(c)]||m[c]||p[c]||i;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function c(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:l,a[1]=s;for(var o=2;o<i;o++)a[o]=t[o];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6134:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return o},toc:function(){return d},default:function(){return m}});var r=t(3117),l=t(102),i=(t(7294),t(3905)),a=["components"],s={id:"realbank",title:"\u5b9e\u6218\u5e93",sidebar_label:"\u5b9e\u6218\u5e93",slug:"/algorithm/realbank",description:"\u5b9e\u6218\u5e93\u3002",image:"img/meta.png"},u=void 0,o={unversionedId:"algorithm/realbank",id:"algorithm/realbank",title:"\u5b9e\u6218\u5e93",description:"\u5b9e\u6218\u5e93\u3002",source:"@site/docs/algorithm/RealBank.md",sourceDirName:"algorithm",slug:"/algorithm/realbank",permalink:"/docs/algorithm/realbank",editUrl:"https://github.com/xmidtao/documentation/tree/main/docs/algorithm/RealBank.md",tags:[],version:"current",lastUpdatedAt:1692714783,formattedLastUpdatedAt:"8/22/2023",frontMatter:{id:"realbank",title:"\u5b9e\u6218\u5e93",sidebar_label:"\u5b9e\u6218\u5e93",slug:"/algorithm/realbank",description:"\u5b9e\u6218\u5e93\u3002",image:"img/meta.png"},sidebar:"docs",previous:{title:"\u523b\u7ec3\u5e932",permalink:"/docs/algorithm/testbank2"},next:{title:"\u7b80\u4ecb",permalink:"/docs/database/introduction"}},d=[{value:"\u7b97\u6cd5\u9898\u76ee",id:"\u7b97\u6cd5\u9898\u76ee",children:[{value:"\u2705 1. \u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\u6570\u7ec4\u4e2d\uff0c\u5feb\u901f\u5220\u9664\u67d0\u4e2a\u503c\uff0c\u5b58\u5728\u91cd\u590d\u503c  \u4e2d\u7b49",id:"-1-\u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\u6570\u7ec4\u4e2d\u5feb\u901f\u5220\u9664\u67d0\u4e2a\u503c\u5b58\u5728\u91cd\u590d\u503c--\u4e2d\u7b49",children:[],level:3},{value:"\u2705 \u529b\u6263 86. \u5206\u9694\u94fe\u8868 \u4e2d\u7b49",id:"-\u529b\u6263-86-\u5206\u9694\u94fe\u8868-\u4e2d\u7b49",children:[],level:3},{value:"\u2705 \u529b\u6263 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u4e2d\u7b49",id:"-\u529b\u6263-215-\u6570\u7ec4\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20-\u4e2d\u7b49",children:[],level:3},{value:"\u2705 \u529b\u6263 23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868 \u56f0\u96be",id:"-\u529b\u6263-23-\u5408\u5e76-k-\u4e2a\u5347\u5e8f\u94fe\u8868-\u56f0\u96be",children:[],level:3},{value:"\u2705 5. 01 \u6392\u5e8f\uff0c\u4e00\u4e2a 01 \u6570\u7ec4\uff0c\u628a\u6240\u6709 0 \u6392\u5728\u524d\u9762\uff0c1 \u6392\u5728\u540e\u9762, \u8fd4\u56de\u4ea4\u4e92\u6b21\u6570",id:"-5-01-\u6392\u5e8f\u4e00\u4e2a-01-\u6570\u7ec4\u628a\u6240\u6709-0-\u6392\u5728\u524d\u97621-\u6392\u5728\u540e\u9762-\u8fd4\u56de\u4ea4\u4e92\u6b21\u6570",children:[],level:3},{value:"\u2705 7. \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u542b\u6709\u7684\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570\u3002\u5b57\u7b26\u5728ACSII\u8303\u56f4\u51850-127\uff0c\u4e0d\u5728\u8303\u56f4\u7684\u4e0d\u4f5c\u7edf\u8ba1",id:"-7-\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u542b\u6709\u7684\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570\u5b57\u7b26\u5728acsii\u8303\u56f4\u51850-127\u4e0d\u5728\u8303\u56f4\u7684\u4e0d\u4f5c\u7edf\u8ba1",children:[],level:3},{value:"\u2705 8. \u6709\u5e8f\u6570\u7ec4\u4e2d\u627e\u51fa\u4e24\u4e2a\u6570\u6ee1\u8db3\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 target\uff0c\u8fd4\u56de\u4e24\u4e2a\u76ee\u6807\u503c",id:"-8-\u6709\u5e8f\u6570\u7ec4\u4e2d\u627e\u51fa\u4e24\u4e2a\u6570\u6ee1\u8db3\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570-target\u8fd4\u56de\u4e24\u4e2a\u76ee\u6807\u503c",children:[],level:3},{value:"\u2705 \u529b\u6263 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",id:"-\u529b\u6263-25-k-\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",children:[],level:3},{value:"\u274e \u529b\u6263 93. \u590d\u539f IP \u5730\u5740\uff08\u7c7b\u4f3c\uff09",id:"-\u529b\u6263-93-\u590d\u539f-ip-\u5730\u5740\u7c7b\u4f3c",children:[],level:3},{value:"\u274e \u529b\u6263 14\uff1a\u6700\u957f\u516c\u5171\u524d\u7f00\uff08\u7c7b\u4f3c\uff09",id:"-\u529b\u6263-14\u6700\u957f\u516c\u5171\u524d\u7f00\u7c7b\u4f3c",children:[],level:3},{value:"\u2705 \u529b\u6263 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",id:"-\u529b\u6263-3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",children:[],level:3}],level:2},{value:"\u81ea\u62df\u9898\u76ee",id:"\u81ea\u62df\u9898\u76ee",children:[{value:"1. \u6211\u6709\u4e00\u53f0\u673a\u5668\uff0c1T \u6570\u636e\u91cf\uff0c1 \u6587\u4ef6\uff0c\u5185\u5b58\uff1a30G\uff0cCPU\uff1a10 \u4e2a\uff0c\u5bf9 1 T \u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u8f93\u51fa\u6392\u5e8f\u7ed3\u679c\u5230\u6587\u4ef6",id:"1-\u6211\u6709\u4e00\u53f0\u673a\u56681t-\u6570\u636e\u91cf1-\u6587\u4ef6\u5185\u5b5830gcpu10-\u4e2a\u5bf9-1-t-\u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u8f93\u51fa\u6392\u5e8f\u7ed3\u679c\u5230\u6587\u4ef6",children:[],level:3},{value:"\u2705 2. \u5b9e\u73b0\u4e00\u4e2a MergeSort\uff0c\u5185\u5b58\u5360\u7528\u6700\u5c0f",id:"-2-\u5b9e\u73b0\u4e00\u4e2a-mergesort\u5185\u5b58\u5360\u7528\u6700\u5c0f",children:[],level:3}],level:2}],p={toc:d};function m(e){var n=e.components,t=(0,l.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u5b9e\u6218\u5e93\u4e2d\uff0c\u5199\u51fa\u6765\u7684 \u2705\uff0c\u672a\u5b8c\u6210 \u274e"),(0,i.kt)("h2",{id:"\u7b97\u6cd5\u9898\u76ee"},"\u7b97\u6cd5\u9898\u76ee"),(0,i.kt)("h3",{id:"-1-\u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\u6570\u7ec4\u4e2d\u5feb\u901f\u5220\u9664\u67d0\u4e2a\u503c\u5b58\u5728\u91cd\u590d\u503c--\u4e2d\u7b49"},"\u2705 1. \u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\u6570\u7ec4\u4e2d\uff0c\u5feb\u901f\u5220\u9664\u67d0\u4e2a\u503c\uff0c\u5b58\u5728\u91cd\u590d\u503c  \u4e2d\u7b49"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solutions:\n    def __init__(self) -> None:\n        pass\n\n    def fastDelNumber(self, nums, target):\n        # \u53cc\u6307\u9488 left, right\n        # Time: O(N) Space: O(1)\n        n = len(nums) - 1\n        left, right = 0, n\n        count = 0\n        while left <= right:\n            # right \u6307\u5411 \u975e target \u4e0b\u6807\n            while nums[right] == target:\n                right -= 1\n                count += 1\n            if nums[left] == target:            \n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n                count += 1\n            left += 1\n            right -= 1\n        return nums[:n - count]\n\n    def s1(self, nums, target):\n        if not nums: return nums\n        # \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e:\n        # Time: O(logK) + O(logN) Space: O(1)\n        nums.sort()\n        n = len(nums) - 1\n        start = end = 0\n        left, right = 0, n\n        while left <= right:\n            mid = left + (right - left)//2\n            if nums[mid] == target:\n                start = end = mid\n                # \u5de6\u53f3\u5b9a\u4f4d\u503c\u8303\u56f4\n                while start > 0 and nums[start] == nums[start - 1]:\n                    start -= 1\n                while end < n and nums[end] == nums[end + 1]:\n                    end += 1\n                return nums[:start + 1] + nums[end:]\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return nums\n")),(0,i.kt)("h3",{id:"-\u529b\u6263-86-\u5206\u9694\u94fe\u8868-\u4e2d\u7b49"},"\u2705 \u529b\u6263 ",(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.cn/problems/partition-list/"},"86. \u5206\u9694\u94fe\u8868")," \u4e2d\u7b49"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        # O(n) O(1)\n        # \u521b\u5efa\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u7528\u4e8e\u5b58\u653e\u5c0f\u4e8e x \u7b49\u4e8e\u6216\u5927\u4e8e x \u7684\u8282\u70b9\n        dummy1 = ListNode()\n        dummy2 = ListNode()\n        \n        # \u521b\u5efa\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u4e24\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\n        smaller = dummy1\n        greater = dummy2\n        \n        cur = head\n        while cur:\n            if cur.val < x:\n                smaller.next = cur\n                smaller = smaller.next\n            else:\n                greater.next = cur\n                greater = greater.next\n                \n            cur = cur.next\n        # \u5c06\u5c0f\u4e8e x \u7684\u8282\u70b9\u90e8\u5206\u7684\u5c3e\u8282\u70b9\u8fde\u63a5\u5230\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u90e8\u5206\u7684\u5934\u8282\u70b9\n        smaller.next = dummy2.next \n        # \u5c06\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u90e8\u5206\u7684\u5c3e\u8282\u70b9\u7684 next \u7f6e\u4e3a None\uff0c\u8868\u793a\u94fe\u8868\u7ed3\u675f\n        greater.next = None\n\n        # \u8fd4\u56de\u91cd\u65b0\u6392\u5217\u540e\u7684\u94fe\u8868\u7684\u5934\u8282\u70b9\n        return dummy1.next\n")),(0,i.kt)("h3",{id:"-\u529b\u6263-215-\u6570\u7ec4\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20-\u4e2d\u7b49"},"\u2705 \u529b\u6263 ",(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.cn/problems/kth-largest-element-in-an-array/"},"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20")," \u4e2d\u7b49"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# \u65e0\u5e8f\u6570\u7ec4\u627e\u7b2c K \u5927\u7684\u6570\uff0c\u8981\u6c42\uff1a1. \u590d\u6742\u5ea6\u81f3\u5c11O(NlogN)\nimport heapq\n\nclass Slutions:\n    def largestK(nums, k):\n        heap = []\n        # \u5c0f\u9876\u5806 O(Nlogk)\uff0c\n        for num in nums:\n            # \u5165\u6808\n            heapq.heappush(heap, num)\n            if len(heap) > k:\n                # \u6700\u5c0f\u503c\u51fa\u6808\n                heapq.heappop(heap)\n        print(heap[0])\n        return heap[0]\n")),(0,i.kt)("h3",{id:"-\u529b\u6263-23-\u5408\u5e76-k-\u4e2a\u5347\u5e8f\u94fe\u8868-\u56f0\u96be"},"\u2705 \u529b\u6263 ",(0,i.kt)("a",{parentName:"h3",href:"https://leetcode.cn/problems/merge-k-sorted-lists/"},"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868")," \u56f0\u96be"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        def mergeList(l1, l2):\n            if not l1: return l2\n            if not l2: return l1\n            dummy = ListNode(0)\n            curr = dummy\n            while l1 and l2:\n                if l1.val <= l2.val:\n                    curr.next = l1\n                    l1 = l1.next\n                else:\n                    curr.next = l2\n                    l2 = l2.next\n                curr = curr.next\n            # \u5269\u4f59\u94fe\u8868\u63a5\u5230\u5c3e\u90e8\n            curr.next = l1 if l1 else l2\n            return dummy.next\n\n        n = len(lists)\n        if n == 0:\n            return None\n        if n == 1:\n            return lists[0]\n        if n == 2:\n            return mergeList(lists[0], lists[1])\n\n        left = lists[:n//2]\n        right = lists[n//2:]\n\n        return mergeList(self.mergeKLists(left), self.mergeKLists(right))\n")),(0,i.kt)("h3",{id:"-5-01-\u6392\u5e8f\u4e00\u4e2a-01-\u6570\u7ec4\u628a\u6240\u6709-0-\u6392\u5728\u524d\u97621-\u6392\u5728\u540e\u9762-\u8fd4\u56de\u4ea4\u4e92\u6b21\u6570"},"\u2705 5. 01 \u6392\u5e8f\uff0c\u4e00\u4e2a 01 \u6570\u7ec4\uff0c\u628a\u6240\u6709 0 \u6392\u5728\u524d\u9762\uff0c1 \u6392\u5728\u540e\u9762, \u8fd4\u56de\u4ea4\u4e92\u6b21\u6570"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"    def sort(self, nums):\n        if not nums: return nums\n        swaps = 0\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            if nums[left] == 0:\n                left += 1\n            elif nums[right] == 1:\n                right -= 1\n            else:\n                # \u4ea4\u6362 01 \u4f4d\u7f6e\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n                swaps += 1\n        return swaps\n")),(0,i.kt)("h3",{id:"-7-\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u542b\u6709\u7684\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570\u5b57\u7b26\u5728acsii\u8303\u56f4\u51850-127\u4e0d\u5728\u8303\u56f4\u7684\u4e0d\u4f5c\u7edf\u8ba1"},"\u2705 7. \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u542b\u6709\u7684\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570\u3002\u5b57\u7b26\u5728ACSII\u8303\u56f4\u51850-127\uff0c\u4e0d\u5728\u8303\u56f4\u7684\u4e0d\u4f5c\u7edf\u8ba1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# \u5b57\u7b26\u4e32\u5b57\u7b26-\u5b57\u7b26\u7edf\u8ba1\n# \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u542b\u6709\u7684\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570\u3002\u5b57\u7b26\u5728ACSII\u8303\u56f4\u51850-127\uff0c\u4e0d\u5728\u8303\u56f4\u7684\u4e0d\u4f5c\u7edf\u8ba1\ndef count_unique_characters(self, s):\n    unique_characters = set()\n    \n    for c in s:\n        if 0 <= ord(c) <= 127:\n            unique_characters.add(c)\n    # \u51cf1\uff0c\u8c03\u8bd5\u65f6\u53d1\u73b0\u6709\u4e2a \\n \u88ab\u7edf\u8ba1\u4e86\n    return len(unique_characters) - 1 \n")),(0,i.kt)("h3",{id:"-8-\u6709\u5e8f\u6570\u7ec4\u4e2d\u627e\u51fa\u4e24\u4e2a\u6570\u6ee1\u8db3\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570-target\u8fd4\u56de\u4e24\u4e2a\u76ee\u6807\u503c"},"\u2705 8. \u6709\u5e8f\u6570\u7ec4\u4e2d\u627e\u51fa\u4e24\u4e2a\u6570\u6ee1\u8db3\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 target\uff0c\u8fd4\u56de\u4e24\u4e2a\u76ee\u6807\u503c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def two_sum_sorted(numbers, target):\n    # 1. \u4e8c\u5206\u67e5\u627e\n    left, right = 0, len(numbers) - 1\n    while left <= right:\n        curr_sum = numbers[left] + numbers[right]\n        if curr_sum == target:\n            return [numbers[left], numbers[right]]\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return []%\n")),(0,i.kt)("h3",{id:"-\u529b\u6263-25-k-\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868"},"\u2705 \u529b\u6263 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    # \u53cd\u8f6c\u94fe\u8868\u7684\u53d8\u79cd\uff0c\u62c6\u5206\u4e3a\u5b50\u94fe\u8868\u53cd\u8f6c\uff0c\u6761\u4ef6\u5224\u65ad\uff0c\u4e0d\u8db3 k \u628a\u5269\u4f59\u5b50\u94fe\u8868\u63a5\u5230\u53cd\u8f6c\u94fe\u8868\u540e\u8fd4\u56de\n    # \u7ffb\u8f6c\u4e00\u4e2a\u5b50\u94fe\u8868\uff0c\u5e76\u4e14\u8fd4\u56de\u65b0\u7684\u5934\u4e0e\u5c3e\n    def reverse(self, head: ListNode, tail: ListNode):\n        prev = tail.next\n        p = head\n        while prev != tail:\n            nex = p.next\n            p.next = prev\n            prev = p\n            p = nex\n        return tail, head\n\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n\n        while head:\n            tail = pre\n            # \u67e5\u770b\u5269\u4f59\u90e8\u5206\u957f\u5ea6\u662f\u5426\u5927\u4e8e\u7b49\u4e8e k\n            for i in range(k):\n                tail = tail.next\n                if not tail:\n                    return dummy.next\n            nex = tail.next\n            head, tail = self.reverse(head, tail)\n            # \u628a\u5b50\u94fe\u8868\u91cd\u65b0\u63a5\u56de\u539f\u94fe\u8868\n            pre.next = head\n            tail.next = nex\n            pre = tail\n            head = tail.next\n        \n        return dummy.next\n")),(0,i.kt)("h3",{id:"-\u529b\u6263-93-\u590d\u539f-ip-\u5730\u5740\u7c7b\u4f3c"},"\u274e \u529b\u6263 93. \u590d\u539f IP \u5730\u5740\uff08\u7c7b\u4f3c\uff09"),(0,i.kt)("p",null,"\u5b57\u7b26\u4e32\u6570\u5b57\u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff0c\u4f1a\u6709\u7206\u70b8\u7684\u7ed3\u679c\uff0c\u6bd4\u5982 '23'\uff0c\u8f93\u51fa\u7ed3\u679c 10000"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        def backtrack(start, path):\n            if start == len(s) and len(path) == 4:\n                result.append(\".\".join(path))\n                return\n            if start >= len(s) or len(path) >= 4:\n                return\n            \n            for length in range(1, min(4, len(s) - start) + 1):\n                segment = s[start:start + length]\n                if is_valid(segment):\n                    path.append(segment)\n                    backtrack(start + length, path)\n                    path.pop()\n\n        def is_valid(segment):\n            if len(segment) > 1 and segment[0] == '0':\n                return False\n            num = int(segment)\n            return 0 <= num <= 255\n        \n        result = []\n        backtrack(0, [])\n        return result\n")),(0,i.kt)("h3",{id:"-\u529b\u6263-14\u6700\u957f\u516c\u5171\u524d\u7f00\u7c7b\u4f3c"},"\u274e \u529b\u6263 14\uff1a\u6700\u957f\u516c\u5171\u524d\u7f00\uff08\u7c7b\u4f3c\uff09"),(0,i.kt)("p",null,"\u73b0\u7ed9\u51fa\u76ee\u7684ip\u5730\u5740\u548c\u672c\u5730\u8def\u7531\u8868\uff0c\u8bf7\u8f93\u51fa\u6700\u957f\u5339\u914d\u7684\u8def\u7531\uff0c\u5982\u679c\u6709\u591a\u6761\uff0c\u5219",(0,i.kt)("strong",{parentName:"p"},"\u6309\u7ed9\u51fa\u7684\u5148\u540e\u987a\u5e8f"),"\u8f93\u51fa\u6700\u5148\u7684\uff0c\u5982\u679c\u6ca1\u6709\u5339\u914d\u7684\uff0c\u8f93\u51fa\u5b57\u7b26\u4e32empty, \u8f93\u5165\u53c2\u6570\u7b2c\u4e00\u4e2a\u4e3a\u76ee\u7684ip\u5730\u5740\uff0c\u5341\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3an\u6574\u6570\uff0c\u8868\u793a\u8def\u7531\u8868\u4e2d\u8def\u7531\u7684\u6570\u91cf\u3002"),(0,i.kt)("p",null,"\u5982\u4e0a\u9898\u578b\uff0c\u53ef\u8f6c\u6362\u4e3a\u6700\u957f\u516c\u5171\u524d\u7f00\u5339\u914d\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def find_longest_matching_route(ip_address, n, routes):\n    matching_routes = []\n    max_matching_prefix_len = 0\n\n    for i in range(n):\n        route = routes[i]\n        prefix_len = int(route.split('/')[1])\n        \n        # \u5c06 IP \u5730\u5740\u548c\u8def\u7531\u524d\u7f00\u90fd\u8f6c\u6362\u4e3a\u6574\u6570\u5f62\u5f0f\uff0c\u4fbf\u4e8e\u6bd4\u8f83\n        ip_int = int(''.join(ip_address.split('.')))\n        prefix_int = int(''.join(route.split('/')[0].split('.'))) \n        \n        # \u8ba1\u7b97\u8def\u7531\u524d\u7f00\u7684\u63a9\u7801\n        mask = (1 << 32) - (1 << (32 - prefix_len))\n        \n        # \u5224\u65ad IP \u5730\u5740\u662f\u5426\u5339\u914d\u8def\u7531\u524d\u7f00\n        if (ip_int & mask) == (prefix_int & mask) and prefix_len >= max_matching_prefix_len:\n            matching_routes.append(route)\n            max_matching_prefix_len = prefix_len\n\n    return matching_routes[0] if len(matching_routes) > 0 else \"empty\"\n")),(0,i.kt)("h3",{id:"-\u529b\u6263-3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},"\u2705 \u529b\u6263 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        char_set = set()\n        max_length = 0\n        left = 0\n\n        for right in range(len(s)):\n            while s[right] in char_set:\n                char_set.remove(s[left])\n                left += 1\n            char_set.add(s[right])\n            max_length = max(max_length, right - left + 1)\n\n        return max_length\n")),(0,i.kt)("h2",{id:"\u81ea\u62df\u9898\u76ee"},"\u81ea\u62df\u9898\u76ee"),(0,i.kt)("p",null,"\u81ea\u62df\u9898\u76ee\uff0c\u590d\u6742\u5ea6\u4e0d\u4e00\uff0c\u6709\u4e9b\u4ec5\u5b9e\u73b0\u4f2a\u4ee3\u7801\uff0c\u7b80\u5355\u7684\u5219\u5b9e\u9645\u5199\u5b8c\u6574\u3002"),(0,i.kt)("h3",{id:"1-\u6211\u6709\u4e00\u53f0\u673a\u56681t-\u6570\u636e\u91cf1-\u6587\u4ef6\u5185\u5b5830gcpu10-\u4e2a\u5bf9-1-t-\u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u8f93\u51fa\u6392\u5e8f\u7ed3\u679c\u5230\u6587\u4ef6"},"1. \u6211\u6709\u4e00\u53f0\u673a\u5668\uff0c1T \u6570\u636e\u91cf\uff0c1 \u6587\u4ef6\uff0c\u5185\u5b58\uff1a30G\uff0cCPU\uff1a10 \u4e2a\uff0c\u5bf9 1 T \u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u8f93\u51fa\u6392\u5e8f\u7ed3\u679c\u5230\u6587\u4ef6"),(0,i.kt)("p",null,"\u601d\u8def\uff1a"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u7b2c\u4e00\u9636\u6bb5\uff1a\u5207\u5206 N \u4e2a\u6587\u4ef6\uff0c\u5e76\u5c40\u90e8\u6392\u5e8f\n\u7b2c\u4e8c\u9636\u6bb5\uff1a\u5f52\u5e76\u6392\u5e8f\uff0c\u5408\u5e76 K \u6709\u5e8f\u6570\u7ec4")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def __init_(self):\n        self.chunks = []\n        self.blockSize = 25 # \u5355\u4f4d\uff1aGB\n        self.n = 10\n    # \u6211\u6709\u4e00\u53f0\u673a\u5668\uff0c1T \u6570\u636e\u91cf\uff0c1 \u6587\u4ef6\uff0c30G \u5185\u5b58\uff0cCPU\uff1aN \u4e2a\n    # \u5bf9 1 T \u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u8f93\u51fa\u6392\u5e8f\u7ed3\u679c\u5230\u6587\u4ef6\n    # \u7b2c\u4e00\u9636\u6bb5\uff1a\u5207\u5206 N \u4e2a\u6587\u4ef6\uff0c\u5e76\u5c40\u90e8\u6392\u5e8f\n    # \u7b2c\u4e8c\u9636\u6bb5\uff1a\u5f52\u5e76\u6392\u5e8f\uff0c\u5408\u5e76 K \u6709\u5e8f\u6570\u7ec4\n    def ExternalSort(self, inFile, outFile):\n        self.splitAndSort(inFile, self.blockSize)\n        self.mergeSort(outFile)\n        \n    def splitAndSort(self, inFile, blockSize):\n        buckets = 1024 // blockSize\n        for _ in range(buckets):\n            chunk = self.readNextChunk(inFile, blockSize)\n            sorted(chunk) # \u6392\u5e8f\n            self.writeChunkToDisk(chunk)\n            self.chunks.append(chunk)\n    def writeChunkToDisk(self, chunk):\n        pass\n    def readNextChunk(self, inFile, blockSize):\n        # TODO\n        return [] \n    def mergeSort(self, outFile):\n         while len(self.chunks) > 0:\n            newChunks = []\n            length = len(self.chunks) // self.n\n            for i in range(self.n):\n                 start = i\n                 end = len(self.chunks) if i + length > len(self.chunks) else i + length\n                 mergeChunk = self.mergeChunk(self.chunks[start: end])\n                 newChunks.append(mergeChunk)\n            self.chunk = newChunks\n        self.writeChunkToDisk(self.chunk[0], outFile) \n    def writeChunkToDisk(self, chunk, outFile):\n        pass\n    def mergeChunk(self, rChunks):\n        pass  \n")),(0,i.kt)("p",null,"\u534a\u5c0f\u65f6\uff0c\u5b9e\u73b0\u4f2a\u4ee3\u7801\uff0c\u5b8c\u6210\u5ea6\u5982\u4e0a\uff0c\u6ca1\u5199\u5b8c\u3002"),(0,i.kt)("h3",{id:"-2-\u5b9e\u73b0\u4e00\u4e2a-mergesort\u5185\u5b58\u5360\u7528\u6700\u5c0f"},"\u2705 2. \u5b9e\u73b0\u4e00\u4e2a MergeSort\uff0c\u5185\u5b58\u5360\u7528\u6700\u5c0f"),(0,i.kt)("p",null,"\u767d\u677f\u5199\u4ee3\u7801\uff0c\u6709\u70b9\u7d27\u5f20\uff08\u5199\u5f97\u5f88\u5feb\uff09\uff0c\u77e5\u9053\u5982\u4f55\u5b9e\u73b0\uff0chasNext \u903b\u8f91\u5199\u7684\u6709\u95ee\u9898\uff0c\u628a\u653e\u8fed\u4ee3\u5668\u7b2c\u4e00\u4e2a\u5143\u7d20\u7ed9\u5199\u8fdb hasNext \u4e2d\u4e86\uff0c\u9762\u8bd5\u5b98\u63d0\u793a\u6ca1\u8fd4\u56de Boolean \u7c7b\u578b\u503c\uff0c\u6709\u63d0\u793a\u4fee\u6539\u540e\u4f9d\u7136\u6709\u70b9\u95ee\u9898\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.ArrayList;\nimport java.util.List;\nimport java.util.PriorityQueue;\n\npublic class Merge {\n\n    interface SortedIter {\n        boolean hasNext();\n        int next();\n    }\n\n    public SortedIter kMerge(List<SortedIter> iters) {\n        // \u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u7528\u4e8e\u5408\u5e76\u6709\u5e8f\u5e8f\u5217\n        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n\n        // \u5c06\u6bcf\u4e2a\u8fed\u4ee3\u5668\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u6700\u5c0f\u5806\n        for (SortedIter iter : iters) {\n            if (iter.hasNext()) {\n                int val = iter.next();\n                minHeap.offer(new int[]{val, iters.indexOf(iter)});\n            }\n        }\n\n        return new SortedIter() {\n            @Override\n            public boolean hasNext() {\n                return !minHeap.isEmpty();\n            }\n\n            @Override\n            public int next() {\n                if (!hasNext()) {\n                    throw new UnsupportedOperationException("No more elements.");\n                }\n\n                int[] curr = minHeap.poll();\n                int val = curr[0];\n                int idx = curr[1];\n\n                SortedIter iter = iters.get(idx);\n                if (iter.hasNext()) {\n                    int newVal = iter.next();\n                    minHeap.offer(new int[]{newVal, idx});\n                }\n\n                return val;\n            }\n        };\n    }\n\n    public static void main(String[] args) {\n        List<SortedIter> iters = new ArrayList<>();\n\n        SortedIter iter1 = new SortedIter() {\n            private int[] arr = {1, 4, 7, 10};\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < arr.length;\n            }\n\n            @Override\n            public int next() {\n                return arr[index++];\n            }\n        };\n\n        SortedIter iter2 = new SortedIter() {\n            private int[] arr = {2, 5, 8};\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < arr.length;\n            }\n\n            @Override\n            public int next() {\n                return arr[index++];\n            }\n        };\n\n        iters.add(iter1);\n        iters.add(iter2);\n\n        Merge merge = new Merge();\n        SortedIter mergedIter = merge.kMerge(iters);\n\n        while (mergedIter.hasNext()) {\n            System.out.print(mergedIter.next() + " ");\n        }\n    }\n}\n')))}m.isMDXComponent=!0}}]);