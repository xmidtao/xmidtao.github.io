"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[5804],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=p(t),f=r,k=m["".concat(o,".").concat(f)]||m[f]||u[f]||l;return t?a.createElement(k,i(i({ref:n},s),{},{components:t})):a.createElement(k,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var d={};for(var o in n)hasOwnProperty.call(n,o)&&(d[o]=n[o]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9086:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var a=t(3117),r=t(102),l=(t(7294),t(3905)),i=["components"],d={id:"testbank1",title:"\u523b\u7ec3\u5e931",sidebar_label:"\u523b\u7ec3\u5e931",slug:"/algorithm/testbank1",description:"\u7f51\u7edc\u6536\u96c6\u9898\u5e931\u3002",image:"img/meta.png"},o=void 0,p={unversionedId:"algorithm/testbank1",id:"algorithm/testbank1",title:"\u523b\u7ec3\u5e931",description:"\u7f51\u7edc\u6536\u96c6\u9898\u5e931\u3002",source:"@site/docs/algorithm/TestBank1.md",sourceDirName:"algorithm",slug:"/algorithm/testbank1",permalink:"/docs/algorithm/testbank1",editUrl:"https://github.com/xmidtao/documentation/tree/main/docs/algorithm/TestBank1.md",tags:[],version:"current",lastUpdatedAt:1690869614,formattedLastUpdatedAt:"8/1/2023",frontMatter:{id:"testbank1",title:"\u523b\u7ec3\u5e931",sidebar_label:"\u523b\u7ec3\u5e931",slug:"/algorithm/testbank1",description:"\u7f51\u7edc\u6536\u96c6\u9898\u5e931\u3002",image:"img/meta.png"},sidebar:"docs",previous:{title:"\u5251\u6307 Offer",permalink:"/docs/algorithm/offer"},next:{title:"\u523b\u7ec3\u5e932",permalink:"/docs/algorithm/testbank2"}},s=[{value:"\u9898\u76ee",id:"\u9898\u76ee",children:[{value:"\u52a8\u6001\u89c4\u5212",id:"\u52a8\u6001\u89c4\u5212",children:[],level:3},{value:"LRU",id:"lru",children:[],level:3},{value:"\u9012\u5f52",id:"\u9012\u5f52",children:[],level:3},{value:"\u94fe\u8868",id:"\u94fe\u8868",children:[],level:3},{value:"\u4e8c\u5206\u67e5\u627e",id:"\u4e8c\u5206\u67e5\u627e",children:[],level:3},{value:"HASH \u8868",id:"hash-\u8868",children:[],level:3},{value:"\u6700\u5927\u9891\u7387\u6808",id:"\u6700\u5927\u9891\u7387\u6808",children:[],level:3},{value:"\u6392\u5e8f",id:"\u6392\u5e8f",children:[],level:3},{value:"\u4e8c\u53c9\u6811",id:"\u4e8c\u53c9\u6811",children:[],level:3},{value:"\u6808",id:"\u6808",children:[],level:3},{value:"\u6570\u7ec4",id:"\u6570\u7ec4",children:[],level:3}],level:2},{value:"\u89e3\u9898",id:"\u89e3\u9898",children:[{value:"70. \u722c\u697c\u68af",id:"70-\u722c\u697c\u68af",children:[],level:3},{value:"\u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898",id:"\u5251\u6307-offer-10--ii-\u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898",children:[],level:3},{value:"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a",id:"121-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a",children:[],level:3},{value:"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II",id:"122-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-ii",children:[],level:3},{value:"123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III",id:"123-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-iii",children:[],level:3},{value:"188. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV",id:"188-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-iv",children:[],level:3},{value:"309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f",id:"309-\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f",children:[],level:3},{value:"714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39",id:"714-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39",children:[],level:3},{value:"\u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c",id:"\u5251\u6307-offer-47-\u793c\u7269\u7684\u6700\u5927\u4ef7\u503c",children:[],level:3},{value:"146. LRU \u7f13\u5b58",id:"146-lru-\u7f13\u5b58",children:[],level:3},{value:"200. \u5c9b\u5c7f\u6570\u91cf",id:"200-\u5c9b\u5c7f\u6570\u91cf",children:[],level:3},{value:"148. \u6392\u5e8f\u94fe\u8868",id:"148-\u6392\u5e8f\u94fe\u8868",children:[],level:3},{value:"147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f",id:"147-\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f",children:[],level:3},{value:"206. \u53cd\u8f6c\u94fe\u8868",id:"206-\u53cd\u8f6c\u94fe\u8868",children:[],level:3},{value:"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",id:"21-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",children:[],level:3},{value:"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868",id:"23-\u5408\u5e76-k-\u4e2a\u5347\u5e8f\u94fe\u8868",children:[],level:3},{value:"160. \u76f8\u4ea4\u94fe\u8868",id:"160-\u76f8\u4ea4\u94fe\u8868",children:[],level:3},{value:"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e",id:"34-\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e",children:[],level:3},{value:"706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04",id:"706-\u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04",children:[],level:3},{value:"705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408",id:"705-\u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408",children:[],level:3},{value:"895. \u6700\u5927\u9891\u7387\u6808",id:"895-\u6700\u5927\u9891\u7387\u6808",children:[],level:3},{value:"75. \u989c\u8272\u5206\u7c7b",id:"75-\u989c\u8272\u5206\u7c7b",children:[],level:3},{value:"912. \u6392\u5e8f\u6570\u7ec4",id:"912-\u6392\u5e8f\u6570\u7ec4",children:[],level:3},{value:"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20",id:"215-\u6570\u7ec4\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20",children:[],level:3},{value:"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c",id:"239-\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c",children:[],level:3},{value:"703. \u6570\u636e\u6d41\u4e2d\u7684\u7b2c K \u5927\u5143\u7d20",id:"703-\u6570\u636e\u6d41\u4e2d\u7684\u7b2c-k-\u5927\u5143\u7d20",children:[],level:3},{value:"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",id:"102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",children:[],level:3},{value:"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386",id:"94-\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386",children:[],level:3},{value:"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III",id:"\u5251\u6307-offer-32---iii-\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811-iii",children:[],level:3},{value:"437. \u8def\u5f84\u603b\u548c III",id:"437-\u8def\u5f84\u603b\u548c-iii",children:[],level:3},{value:"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c",id:"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c",children:[],level:3},{value:"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",id:"235-\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",children:[],level:3},{value:"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",children:[],level:3},{value:"\u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217",id:"\u5251\u6307-offer-09-\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217",children:[],level:3},{value:"56. \u5408\u5e76\u533a\u95f4",id:"56-\u5408\u5e76\u533a\u95f4",children:[],level:3},{value:"54. \u87ba\u65cb\u77e9\u9635",id:"54-\u87ba\u65cb\u77e9\u9635",children:[],level:3}],level:2}],u={toc:s};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u523b\u610f\u7ec3\u4e60\u9898\u5e931\uff0c\u62bd\u53d6\u5e38\u89c1\u7c7b\u578b\u9898\uff0c\u8fdb\u884c\u4e13\u9879\u7ec3\u4e60\u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://leetcode.cn/studyplan/coding-interviews/"},"\u5251\u6307 Offer75 \u9898\u3002")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://leetcode.cn/studyplan/top-100-liked/"},"LeetCode \u70ed\u9898 100"))),(0,l.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,l.kt)("h3",{id:"\u52a8\u6001\u89c4\u5212"},"\u52a8\u6001\u89c4\u5212"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/climbing-stairs/"},"70. \u722c\u697c\u68af")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/"},"\u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/gu-piao-de-zui-da-li-run-lcof/"},"\u5251\u6307 Offer 63. \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/"},"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/"},"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/"},"123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/"},"188. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV")),(0,l.kt)("td",{parentName:"tr",align:null},"\u56f0\u96be"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/"},"\u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"lru"},"LRU"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/lru-cache/"},"146. LRU \u7f13\u5b58")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"\u9012\u5f52"},"\u9012\u5f52"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/number-of-islands/"},"200. \u5c9b\u5c7f\u6570\u91cf")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"\u94fe\u8868"},"\u94fe\u8868"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/sort-list/"},"148. \u6392\u5e8f\u94fe\u8868")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/insertion-sort-list/"},"147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/reverse-linked-list/"},"206. \u53cd\u8f6c\u94fe\u8868")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/merge-two-sorted-lists/"},"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/merge-k-sorted-lists/"},"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868")),(0,l.kt)("td",{parentName:"tr",align:null},"\u56f0\u96be"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/"},"160. \u76f8\u4ea4\u94fe\u8868")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"\u4e8c\u5206\u67e5\u627e"},"\u4e8c\u5206\u67e5\u627e"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/"},"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"hash-\u8868"},"HASH \u8868"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/design-hashmap/"},"706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/design-hashset/"},"705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"\u6700\u5927\u9891\u7387\u6808"},"\u6700\u5927\u9891\u7387\u6808"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/maximum-frequency-stack/"},"895. \u6700\u5927\u9891\u7387\u6808")),(0,l.kt)("td",{parentName:"tr",align:null},"\u56f0\u96be"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"\u6392\u5e8f"},"\u6392\u5e8f"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/sort-colors/"},"75. \u989c\u8272\u5206\u7c7b")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/sort-an-array/"},"912. \u6392\u5e8f\u6570\u7ec4")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/kth-largest-element-in-an-array/"},"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/sliding-window-maximum/"},"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c")),(0,l.kt)("td",{parentName:"tr",align:null},"\u56f0\u96be"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/kth-largest-element-in-a-stream/"},"703. \u6570\u636e\u6d41\u4e2d\u7684\u7b2c K \u5927\u5143\u7d20")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"\u4e8c\u53c9\u6811"},"\u4e8c\u53c9\u6811"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/"},"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/binary-tree-inorder-traversal/"},"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/"},"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/path-sum-iii/"},"437. \u8def\u5f84\u603b\u548c III")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum/"},"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c")),(0,l.kt)("td",{parentName:"tr",align:null},"\u56f0\u96be"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/"},"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/"},"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"\u6808"},"\u6808"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/"},"\u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217")),(0,l.kt)("td",{parentName:"tr",align:null},"\u7b80\u5355"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"\u6570\u7ec4"},"\u6570\u7ec4"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u7ea7\u522b"),(0,l.kt)("th",{parentName:"tr",align:null},"\u72b6\u6001"),(0,l.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/merge-intervals/"},"56. \u5408\u5e76\u533a\u95f4")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://leetcode.cn/problems/spiral-matrix/"},"54. \u87ba\u65cb\u77e9\u9635")),(0,l.kt)("td",{parentName:"tr",align:null},"\u4e2d\u7b49"),(0,l.kt)("td",{parentName:"tr",align:null},"\u5df2\u89e3\u7b54"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"\u89e3\u9898"},"\u89e3\u9898"),(0,l.kt)("h3",{id:"70-\u722c\u697c\u68af"},"70. \u722c\u697c\u68af"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\n# range(3, i+1) and dp[i] = dp[i-1] + dp[i-2] \nclass Solution:\n    def climbStairs(self, n: int) -> int:\n        if n < 3: return n\n        dp = [0] * (n+1)\n        dp[0] = 0\n        dp[1] = 1\n        dp[2] = 2\n\n        for i in range(3, n + 1):\n           dp[i] = dp[i-1] + dp[i-2]\n\n        return dp[-1]\n\n")),(0,l.kt)("h3",{id:"\u5251\u6307-offer-10--ii-\u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898"},"\u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\n# range(3, i+1) and dp[i] = dp[i-1] + dp[i-2] \nclass Solution:\n    def numWays(self, n: int) -> int:\n        if n == 0: return 1\n        if n <= 3: return n\n\n        # DP \u72b6\u6001\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        dp[1] = 1\n        dp[2] = 2\n\n        # DP \u65b9\u7a0b\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n\n        return dp[-1]%1000000007\n\n")),(0,l.kt)("h3",{id:"121-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"},"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"),(0,l.kt)("p",null,"(1) \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u8fed\u4ee3\u4fee\u6539"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def maxProfit(self, prices: List[int]) -> int:\n        if len(prices) <= 1: return 0\n        miniumu,maxiumu = prices[0], 0\n        for i in range(1, len(prices)):\n            maxiumu = max(maxiumu, prices[i] - miniumu)\n            miniumu = min(miniumu, prices[i])\n        return maxiumu\n\n")),(0,l.kt)("p",null,"(2) DP \u89e3\u9898"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        n = len(prices)\n        if n == 0:\n            return 0\n        \n        k = 1\n\n        # DP \u72b6\u6001\u521d\u59cb\u5316\n        dp = [[[0,0] for _ in range(k + 1)] for _ in range(n)]\n\n        # \u521d\u59cb\u5316\u7b2c\u4e00\u5929DP\u72b6\u6001\n        for i in range(1, k+1):\n            # \u7b2c0\u5929\uff0c\u4ea4\u6613 K \u6b21\uff0c\u6301\u6709\u4e00\u80a1\n            dp[0][i][1] = -prices[0]\n            # \u7b2c0\u5929\uff0c\u4ea4\u6613 K \u6b21\uff0c\u672a\u6301\u80a1\u7968\n            dp[0][i][0] = 0\n        \n        # DP \u65b9\u7a0b\n        for i in range(1, n):\n            for j in range(1, k + 1):\n                # \u672a\u6301\u80a1\u7968\n                dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])\n                # \u6301\u6709\u4e00\u80a1\n                dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j - 1][0] - prices[i])\n\n        return dp[-1][k][0]\n\n")),(0,l.kt)("h3",{id:"122-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-ii"},"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# \u4ea4\u6613\u4efb\u610f\u6b21\u6570\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        n = len(prices)\n        if n == 0: return 0\n\n        # DP \u72b6\u6001\u5b9a\u4e49\n        dp = [[0, 0] for _ in range(n)]\n\n        # \u7b2c0\u5929\uff0c\u672a\u6301\u80a1\u7968\n        dp[0][0] = 0\n        # \u7b2c0\u5929\uff0c\u6301\u6709\u80a1\u7968\n        dp[0][1] = -prices[0]\n\n        # DP \u65b9\u7a0b\n        for i in range(1, n):\n            # \u6301\u6709 0 \u80a1\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n            # \u6301\u6709 1 \u80a1\n            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n\n        return dp[-1][0]\n")),(0,l.kt)("h3",{id:"123-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-iii"},"123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        n = len(prices)\n        if n == 0:\n            return 0\n        \n        k = 2\n\n        # DP \u72b6\u6001\u521d\u59cb\u5316\n        dp = [[[0,0] for _ in range(k + 1)] for _ in range(n)]\n\n        # \u521d\u59cb\u5316\u7b2c\u4e00\u5929DP\u72b6\u6001\n        for i in range(1, k+1):\n            # \u7b2c0\u5929\uff0c\u4ea4\u6613 K \u6b21\uff0c\u6301\u6709\u4e00\u80a1\n            dp[0][i][1] = -prices[0]\n            # \u7b2c0\u5929\uff0c\u4ea4\u6613 K \u6b21\uff0c\u672a\u6301\u80a1\u7968\n            dp[0][i][0] = 0\n        \n        # DP \u65b9\u7a0b\n        for i in range(1, n):\n            for j in range(1, k + 1):\n                # \u672a\u6301\u80a1\u7968\n                dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])\n                # \u6301\u6709\u4e00\u80a1\n                dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j - 1][0] - prices[i])\n\n        return dp[-1][k][0]\n")),(0,l.kt)("h3",{id:"188-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-iv"},"188. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV"),(0,l.kt)("p",null,"\u901a\u89e3\uff08\u5251\u6307 offer 63\u3001121\u3001122\u3001123\u3001309\u3001188\u3001714)"),(0,l.kt)("p",null,"DP \u65b9\u7a0b\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u4e0d\u4ea4\u6613 \u2192 dp","[i][k]","[0]"," = max(dp","[i-1][k]","[0]",", dp","[i-1][k]","[1]"," + prices","[i]",")"),(0,l.kt)("li",{parentName:"ul"},"\u4e70\u5165\u4e00\u80a1 \u2192 dp","[i][k]","[1]"," = max(dp","[i-1][k]","[1]",", dp","[i-1][k - 1]","[0]"," - prices","[i]",")")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        n = len(prices)\n        if n == 0: return 0\n\n        # DP \u72b6\u6001\u5b9a\u4e49\n        dp = [[[0,0] for _ in range(k + 1)] for _ in range(n)]\n        # DP \u72b6\u6001\u521d\u59cb\u5316\uff1a\u7b2c0\u5929\uff0c\u4ea4\u6613 k \u6b21\uff0c\u6301\u6709 1 \u80a1\uff1b\u672a\u6301\u80a1\u5c31\u662f 0\n        for i in range(1, k+1):\n            dp[0][i][1] = -prices[0] \n        \n        # DP \u65b9\u7a0b\n        for i in range(1, n):\n            for j in range(1, k+1):\n                # \u672a\u6301\u80a1\u7968\n                dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])\n                # \u6301\u6709\u80a1\u7968\n                dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i])\n        return dp[-1][k][0]\n\n")),(0,l.kt)("h3",{id:"309-\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f"},"309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")),(0,l.kt)("h3",{id:"714-\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39"},"714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")),(0,l.kt)("h3",{id:"\u5251\u6307-offer-47-\u793c\u7269\u7684\u6700\u5927\u4ef7\u503c"},"\u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c"),(0,l.kt)("p",null,"DP \u65b9\u7a0b\uff1adp","[i][j]"," = max(dp","[i-1][j]",", dp","[i][j-1]",") + grid","[i][j]"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def maxValue(self, grid: List[List[int]]) -> int:\n        if not grid[0]: return 0\n\n        m = len(grid) # \u884c\n        n = len(grid[0]) # \u5217\n        \n        # \u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7528\u4e8e\u4fdd\u5b58\u6bcf\u4e2a\u683c\u5b50\u7684\u6700\u5927\u503c\n        # \u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 dp\uff0c\u7528\u4e8e\u4fdd\u5b58\u5230\u8fbe\u6bcf\u4e2a\u683c\u5b50\u7684\u6700\u5927\u4ef7\u503c\n        # dp = [[0] * n for _ in range(m)]\n        dp = [[0 for i in range(n)] for _ in range(m)]\n\n        # dp \u521d\u59cb\u5316\n        dp[0][0] = grid[0][0]\n        # \u521d\u59cb\u5316\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u7684\u6700\u5927\u503c\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        \n        # \u9012\u63a8\u8ba1\u7b97\u6bcf\u4e2a\u683c\u5b50\u7684\u6700\u5927\u4ef7\u503c\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        \n        # \u8fd4\u56de\u53f3\u4e0b\u89d2\u683c\u5b50\u7684\u6700\u5927\u4ef7\u503c\n        return dp[m-1][n-1]\n")),(0,l.kt)("h3",{id:"146-lru-\u7f13\u5b58"},"146. LRU \u7f13\u5b58"),(0,l.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 + \u54c8\u5e0c\u8868\uff08key\u2192value\uff09"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class DLinkedNode:\n    def __init__(self, key = 0, value = 0):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        # self.capacity = capacity\n        # self.cache = collections.OrderedDict()\n        # \u4f7f\u7528\u4f2a\u5934\u90e8\u548c\u5c3e\u90e8\u8282\u70b9\n        self.cache = dict()\n        self.head = DLinkedNode()\n        self.tail = DLinkedNode()\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.capacity = capacity\n        self.size = 0\n\n    def get(self, key: int) -> int:\n        # if key not in self.cache:\n        #     return -1\n        # self.cache.move_to_end(key)\n        # return self.cache[key]\n        if key not in self.cache:\n            return -1\n        # \u5982\u679c key \u5b58\u5728\uff0c\u5148\u901a\u8fc7\u54c8\u5e0c\u6807\u5b9a\u4f4d\uff0c\u518d\u79fb\u52a8\u5230\u5934\u90e8\n        node = self.cache[key]\n        self.moveToHead(node)\n        return node.value\n\n    def put(self, key: int, value: int) -> None:\n        # if key in self.cache:\n        #     self.cache.move_to_end(key)\n        # self.cache[key] = value\n        # if len(self.cache) > self.capacity:\n        #     self.cache.popitem(last=False)\n        if key not in self.cache:\n            # key \u4e0d\u5b58\u5728\uff0c\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\n            node = DLinkedNode(key, value)\n            # \u6dfb\u52a0\u8fdb hash \u8868\n            self.cache[key] = node\n            # \u6dfb\u52a0\u8fdb\u53cc\u5411\u94fe\u8868\u7684\u5934\u90e8\n            self.addToHead(node)\n            self.size += 1\n            if self.size > self.capacity:\n                # \u5982\u679c\u8d85\u51fa\u5bb9\u91cf\uff0c\u5220\u9664\u53cc\u5411\u94fe\u8868\u7684\u5c3e\u90e8\u8282\u70b9\n                removed = self.removeTail()\n                # \u5220\u9664\u54c8\u5e0c\u8868\u4e2d\u5bf9\u5e94\u7684\u9879\n                self.cache.pop(removed.key)\n                self.size -= 1\n        else:\n            # key \u5b58\u5728\uff0c\u5148\u901a\u8fc7\u54c8\u5e0c\u8868\u5b9a\u4f4d\uff0c\u5728\u4fee\u6539 value\uff0c\u5e76\u79fb\u52a8\u5230\u5934\u90e8\n            node = self.cache[key]\n            node.value = value\n            self.moveToHead(node)\n    \n    def addToHead(self, node):\n        node.prev = self.head\n        node.next = self.head.next\n        self.head.next.prev = node\n        self.head.next = node\n    \n    def removeNode(self, node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n        \n    def moveToHead(self, node):\n        self.removeNode(node)\n        self.addToHead(node)\n    \n    def removeTail(self):\n        node = self.tail.prev\n        self.removeNode(node)\n        return node\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)\n")),(0,l.kt)("h3",{id:"200-\u5c9b\u5c7f\u6570\u91cf"},"200. \u5c9b\u5c7f\u6570\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def numIslands(self, grid: List[List[str]]) -> int:\n        if not grid[0]: return 0\n\n        m, n = len(grid), len(grid[0])\n        count = 0\n        def dfs(i, j):\n            # \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff1a\u7ec8\u6b62\u6761\u4ef6\uff0c\u8fb9\u754c\uff0c\u6216\u8005\u9047\u5230\u6c34\n            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == '0':\n                return\n            # \u67d3\u8272\n            grid[i][j] = '0'\n\n            # \u56db\u4e2a\u65b9\u5411\u8fdb\u884c\u641c\u7d22\uff1a\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\n            dfs(i - 1, j)\n            dfs(i + 1, j)\n            dfs(i, j - 1)\n            dfs(i, j + 1)\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    count += 1\n                    dfs(i, j)\n        return count\n")),(0,l.kt)("h3",{id:"148-\u6392\u5e8f\u94fe\u8868"},"148. \u6392\u5e8f\u94fe\u8868"),(0,l.kt)("p",null,"fast,slow \u6307\u9488 \u2192 \u4e00\u5206\u4e3a\u4e8c \u2192 \u8fed\u4ee3l,r\u94fe\u8868\u2192\u5408\u5e76\u6709\u5e8f\u94fe\u8868"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next: return head\n        \n        # slow, fast \u6307\u9488\uff0c\u628a\u94fe\u8868\u4e00\u5206\u4e3a\u4e8c\uff0c\u5206\u522b\u6392\u5e8f\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        left = self.sortList(head)\n        right = self.sortList(mid)\n\n        # \u5408\u5e76 2 \u4e2a\u6709\u5e8f\u94fe\u8868\n        dummy = ListNode(0)\n        cur = dummy\n        while left and right:\n            if left.val <= right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n\n        # \u5408\u5e76\u5b8c\u6210\uff0c\u628a\u5269\u4f59\u94fe\u8868\u653e\u5230\u672b\u5c3e    \n        cur.next = left if left else right\n        return dummy.next\n")),(0,l.kt)("h3",{id:"147-\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f"},"147. \u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n    \n        dummy = ListNode(0)  # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u4f5c\u4e3a\u5df2\u6392\u5e8f\u90e8\u5206\u7684\u5934\u8282\u70b9\n        dummy.next = head\n        sorted_tail = head  # \u5df2\u6392\u5e8f\u90e8\u5206\u7684\u5c3e\u8282\u70b9\n        \n        while sorted_tail.next:\n            curr = sorted_tail.next  # \u5f53\u524d\u8981\u63d2\u5165\u7684\u8282\u70b9\n            \n            if curr.val >= sorted_tail.val: # \u5982\u679c\u5df2\u7ecf\u6709\u5e8f\uff0c\u5219\u7ee7\u7eed\u67e5\u627e\n                sorted_tail = sorted_tail.next\n            else:\n                # \u4ece\u5934\u5f00\u59cb\u627e\u53ef\u4ee5\u5b58\u653e\u7684\u4f4d\u7f6e\n                prev = dummy  \n                \n                while prev.next.val < curr.val:\n                    prev = prev.next\n                \n                sorted_tail.next = curr.next\n                curr.next = prev.next\n                prev.next = curr\n        \n        return dummy.next  # \u8fd4\u56de\u5df2\u6392\u5e8f\u90e8\u5206\u7684\u5934\u8282\u70b9\n")),(0,l.kt)("h3",{id:"206-\u53cd\u8f6c\u94fe\u8868"},"206. \u53cd\u8f6c\u94fe\u8868"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head: return head\n\n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev\n")),(0,l.kt)("h3",{id:"21-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        if not list1:\n            return list2\n        if not list2:\n            return list1\n\n        # \u6392\u5e8f\n        prehead = ListNode(0)\n        curr = prehead\n        l1 = list1\n        l2 = list2\n        while l1 and l2:\n            if l1.val <= l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        curr.next = l1 if l1 else l2\n        return prehead.next\n")),(0,l.kt)("h3",{id:"23-\u5408\u5e76-k-\u4e2a\u5347\u5e8f\u94fe\u8868"},"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        # \u5206\u6cbb\u5408\u5e76\uff1aO(kn\xd7logk) O(logk)\n        # \u5b9e\u73b0\u4e00\u4e2a\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u7684\u51fd\u6570\uff0c\u5806 K \u4e2a\u94fe\u8868\u8fdb\u884c\u62c6\u5206\n        def mergeTwoLists(l1, l2):\n            if not l1: return l2\n            if not l2: return l1\n\n            head = None\n            if l1.val <= l2.val:\n                head = l1\n                head.next = mergeTwoLists(l1.next, l2)\n            else:\n                head = l2\n                head.next = mergeTwoLists(l1, l2.next)\n            return head\n        n = len(lists)\n        if n == 0: return None\n        if n == 1: return lists[0]\n        if n == 2:\n            return mergeTwoLists(lists[0], lists[1])\n        \n        mid = n//2\n        l1 = lists[:mid]\n        l2 = lists[mid:]\n        return mergeTwoLists(self.mergeKLists(l1), self.mergeKLists(l2))\n")),(0,l.kt)("h3",{id:"160-\u76f8\u4ea4\u94fe\u8868"},"160. \u76f8\u4ea4\u94fe\u8868"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        if not headA or not headB: return None\n        # hash set\n        hs = set()\n        A = headA\n        while A != None:\n            hs.add(A)\n            A = A.next\n        \n        B = headB\n        while B != None:\n            if B in hs:\n                return B\n            B = B.next\n        return None\n    \n    # \u53cc\u6307\u9488\uff0cO(m+n) O(1)\n    def s1(self, headA, headB):\n        if not headA or not headB: return None\n        A = headA\n        B = headB\n        while A != B:\n            A = A.next if A else headB\n            B = B.next if B else headA\n        return A\n")),(0,l.kt)("h3",{id:"34-\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"},"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"),(0,l.kt)("p",null,"Time: O(logN), Space = O(1)"),(0,l.kt)("p",null,"\u4e8c\u5206\u67e5\u627e\u4f4d\u7f6e\uff0c\u786e\u5b9a\u76ee\u6807\u503c\uff0c\u5229\u7528 start, end \u53d8\u91cf\u5de6\u53f3\u627e\u8fb9\u754c\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def searchRange(self, nums: List[int], target: int) -> List[int]:\n        left,right = 0, len(nums) - 1\n        start = end = -1\n        while left <= right:\n            mid = left + (right - left)//2\n            if nums[mid] == target:\n                start = end = mid\n                # \u5224\u65ad start \u503c\n                while start > 0 and nums[start - 1] == target:\n                    start -= 1\n                # \u5224\u65ad end \u503c\n                while end < len(nums) - 1 and nums[end + 1] == target:\n                    end += 1\n                break\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return [start, end]\n")),(0,l.kt)("h3",{id:"706-\u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04"},"706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class MyHashMap:\n\n    def __init__(self):\n       self.buckets = 1024\n       self.table = [[] for _ in range(self.buckets)]\n\n    def put(self, key: int, value: int) -> None:\n        hashkey = key % self.buckets\n        for item in self.table[hashkey]:\n            if item[0] == key:\n                item[1] = value\n                return\n        self.table[hashkey].append([key, value])\n\n    def get(self, key: int) -> int:\n        hashkey = key % self.buckets\n        for item in self.table[hashkey]:\n            if item[0] == key:\n                return item[1]\n        return - 1\n\n    def remove(self, key: int) -> None:\n        hashkey = key % self.buckets\n        for i, item in enumerate(self.table[hashkey]):\n            if item[0] == key:\n                self.table[hashkey].pop(i)\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)\n")),(0,l.kt)("h3",{id:"705-\u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408"},"705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class MyHashSet:\n\n    def __init__(self):\n        self.set = []\n\n    def add(self, key: int) -> None:\n        if key not in self.set:\n            self.set.append(key)\n\n    def remove(self, key: int) -> None:\n        if key in self.set:\n            i = self.set.index(key)\n            if i >= 0:\n                self.set.pop(i)\n\n    def contains(self, key: int) -> bool:\n        if key in self.set:\n            return True\n        else:\n            return False\n")),(0,l.kt)("h3",{id:"895-\u6700\u5927\u9891\u7387\u6808"},"895. \u6700\u5927\u9891\u7387\u6808"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class FreqStack:\n\n    def __init__(self):\n        self.freq_dict = {}  # \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u9891\u7387\n        self.group_dict = {}  # \u8bb0\u5f55\u6bcf\u4e2a\u9891\u7387\u5bf9\u5e94\u7684\u5143\u7d20\u5217\u8868\n        self.max_freq = 0  # \u5f53\u524d\u51fa\u73b0\u7684\u6700\u5927\u9891\u7387\n\n    def push(self, x: int) -> None:\n        # \u66f4\u65b0\u5143\u7d20\u7684\u9891\u7387\n        self.freq_dict[x] = self.freq_dict.get(x, 0) + 1\n        freq = self.freq_dict[x]\n        \n        # \u66f4\u65b0\u6700\u5927\u9891\u7387\n        self.max_freq = max(self.max_freq, freq)\n        \n        # \u5c06\u5143\u7d20\u52a0\u5165\u5230\u5bf9\u5e94\u9891\u7387\u7684\u5217\u8868\u4e2d\n        if freq not in self.group_dict:\n            self.group_dict[freq] = []\n        self.group_dict[freq].append(x)\n\n    def pop(self) -> int:\n        # \u4ece\u6700\u5927\u9891\u7387\u5bf9\u5e94\u7684\u5217\u8868\u4e2d\u5f39\u51fa\u5143\u7d20\n        x = self.group_dict[self.max_freq].pop()\n        \n        # \u66f4\u65b0\u5143\u7d20\u7684\u9891\u7387\n        self.freq_dict[x] -= 1\n        \n        # \u5982\u679c\u6700\u5927\u9891\u7387\u5bf9\u5e94\u7684\u5217\u8868\u4e3a\u7a7a\uff0c\u66f4\u65b0\u6700\u5927\u9891\u7387\n        if not self.group_dict[self.max_freq]:\n            self.max_freq -= 1\n        \n        return x\n")),(0,l.kt)("h3",{id:"75-\u989c\u8272\u5206\u7c7b"},"75. \u989c\u8272\u5206\u7c7b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'def sortColors(self, nums: List[int]) -> None:\n        """\n        Do not return anything, modify nums in-place instead.\n        """\n        def swap(nums, index1, index2):\n            nums[index1], nums[index2] = nums[index2], nums[index1]\n        \n        size = len(nums)\n        if size < 2:\n            return\n        zero = 0\n        two = size\n        i = 0\n        while i < two:\n            if nums[i] == 0:\n                swap(nums, i, zero)\n                i += 1\n                zero += 1\n            elif nums[i] == 1:\n                i += 1\n            else:\n                two -= 1\n                swap(nums, i, two)\n')),(0,l.kt)("h3",{id:"912-\u6392\u5e8f\u6570\u7ec4"},"912. \u6392\u5e8f\u6570\u7ec4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# merge sort O(nlogn) O(n)\ndef sortArray(self, nums: List[int]) -> List[int]:\n        def mergeSort(nums):\n            if len(nums) <= 1:\n                return nums\n            mid = len(nums) // 2\n            left = mergeSort(nums[:mid])\n            right = mergeSort(nums[mid:])\n            return merge(left, right)\n\n        def merge(left, right):\n            i, j = 0, 0\n            merged = []\n            while i < len(left) and j < len(right):\n                if left[i] <= right[j]:\n                    merged.append(left[i])\n                    i += 1\n                else:\n                    merged.append(right[j])\n                    j += 1\n            while i < len(left):\n                merged.append(left[i])\n                i += 1\n            while j < len(right):\n                merged.append(right[j])\n                j += 1\n            return merged\n        return mergeSort(nums)\n")),(0,l.kt)("h3",{id:"215-\u6570\u7ec4\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20"},"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def findKthLargest(self, nums: List[int], k: int) -> int:\n        # \u5c0f\u6839\u5806\uff0cO(nlogk) O(k)\n        heap = []\n        for num in nums:\n            heapq.heappush(heap, num)\n            if len(heap) > k:\n                heapq.heappop(heap)\n        return heap[0]\n")),(0,l.kt)("h3",{id:"239-\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c"},"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        result = []\n        window = deque()\n\n        for i in range(len(nums)):\n            # \u79fb\u9664\u6ed1\u52a8\u7a97\u53e3\u5916\u7684\u5143\u7d20\n            if window and window[0] <= i - k:\n                window.popleft()\n\n            # \u4fdd\u6301\u961f\u5217\u4e2d\u5143\u7d20\u7684\u964d\u5e8f\u6392\u5217\n            while window and nums[window[-1]] <= nums[i]:\n                window.pop()\n\n            # \u6dfb\u52a0\u5f53\u524d\u5143\u7d20\u5230\u961f\u5217\n            window.append(i)\n\n            # \u83b7\u53d6\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\n            if i >= k - 1:\n                result.append(nums[window[0]])\n\n        return result\n    \n    # \u5927\u9876\u5806\uff0cpy heapq\n    def s2(self, nums, k):\n        n = len(nums)\n        # py \u9ed8\u8ba4\u4f18\u5148\u961f\u5217\u662f\u5c0f\u6839\u5806\n        q = [(-nums[i], i) for i in range(k)]\n        heapq.heapify(q)\n\n        ans = [-q[0][0]]\n        for i in range(k, n):\n            heapq.heappush(q, (-nums[i], i))\n            while q[0][1] <= i - k:\n                heapq.heappop(q)\n            ans.append(-q[0][0])\n        return ans\n\n    # \u66b4\u529b\u6cd5\uff1aO(n*k) \u8d85\u65f6\n    def s1(self, nums, k):\n        if not nums: return []\n        if k == 1: return nums\n        res = []\n        left, right = 0, k\n        while right <= len(nums):\n            window_max = float("-inf") # \u4e0d\u80fd\u4e3a 0\uff0c\u56e0\u4e3a num \u53ef\u80fd\u662f\u8d1f\u6570\n            for i in range(left, right):\n                window_max = max(window_max, nums[i])\n            res.append(window_max)\n            left += 1\n            right += 1\n        return res\n')),(0,l.kt)("h3",{id:"703-\u6570\u636e\u6d41\u4e2d\u7684\u7b2c-k-\u5927\u5143\u7d20"},"703. \u6570\u636e\u6d41\u4e2d\u7684\u7b2c K \u5927\u5143\u7d20"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# log(K) O(1)\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        self.k = k\n        self.heap = []\n        \n        for num in nums:\n            self.add(num)\n\n    def add(self, val: int) -> int:\n        heapq.heappush(self.heap, val)\n        \n        if len(self.heap) > self.k:\n            heapq.heappop(self.heap)\n        \n        return self.heap[0]\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)\n")),(0,l.kt)("h3",{id:"102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u975e\u9012\u5f52\u7684\u4e2d\u5e8f\u6392\u5e8f",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u975e\u9012\u5f52\uff1aBFS"),(0,l.kt)("li",{parentName:"ul"},"\u9012\u5f52\uff1aBFS")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root: return []\n        res = []\n        def bfs(root):\n            queue = collections.deque()\n            queue.append(root)\n\n            while queue:\n                level = []\n                for _ in range(len(queue)):\n                    node = queue.popleft()\n                    level.append(node.val)\n                    if node.left:\n                        queue.append(node.left)\n                    if node.right:\n                        queue.append(node.right)\n                res.append(level)\n        bfs(root)\n        return res\n")),(0,l.kt)("h3",{id:"94-\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386"},"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        # \u524d\u5e8f\uff1a\u5de6\u53f3\u6839\n        # \u4e2d\u5e8f\uff1a\u5de6\u6839\u53f3\n        # \u540e\u5e8f\uff1a\u6839\u5de6\u53f3\n        res = []\n        def inOrder(node):\n            if not node: return None\n            inOrder(node.left)\n            res.append(node.val)\n            inOrder(node.right)\n        inOrder(root)\n        return res\n")),(0,l.kt)("h3",{id:"\u5251\u6307-offer-32---iii-\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811-iii"},"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root: return []\n        # bfs \u6309\u5c42\u6253\u5370\uff0c\u5728\u53cd\u8f6c\u6570\u7ec4\n        res = []\n        def bfs(root):\n            queue = collections.deque()\n            queue.append(root)\n            \n            state = True\n            while queue:\n                level = []\n                for _ in range(len(queue)):\n                    node = queue.popleft()\n                    level.append(node.val)\n                    if node.left:\n                        queue.append(node.left)\n                    if node.right:\n                        queue.append(node.right)\n                if state:\n                    res.append(level)\n                else:\n                    res.append(level[::-1])\n                state = False if state else True\n        bfs(root)\n        return res\n")),(0,l.kt)("h3",{id:"437-\u8def\u5f84\u603b\u548c-iii"},"437. \u8def\u5f84\u603b\u548c III"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        def rootSum(root, targetSum):\n            if not root: return 0\n            ret = 0\n            if root.val == targetSum:\n                ret += 1\n            ret += rootSum(root.left, targetSum - root.val)\n            ret += rootSum(root.right, targetSum - root.val)\n            return ret\n        if not root: return 0\n        ret = rootSum(root, targetSum)\n        ret += self.pathSum(root.left, targetSum)\n        ret += self.pathSum(root.right, targetSum)\n        return ret\n")),(0,l.kt)("h3",{id:"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c"},"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# O(N\uff09 O(N)\ndef maxPathSum(self, root: Optional[TreeNode]) -> int:\n        # \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6700\u5927\u8def\u5f84\u548c\u7684\u503c\uff0c\u521d\u59cb\u503c\u8bbe\u4e3a\u8d1f\u65e0\u7a77\u5927\n        self.max_sum = float('-inf')\n\n        def maxPathSumHelper(node):\n            if not node:\n                return 0\n\n            # \u9012\u5f52\u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u6700\u5927\u8def\u5f84\u548c\uff0c\u82e5\u4e3a\u8d1f\u6570\u5219\u820d\u5f03\uff0c\u53d60\n            left_sum = max(maxPathSumHelper(node.left), 0)\n\n            # \u9012\u5f52\u8ba1\u7b97\u53f3\u5b50\u6811\u7684\u6700\u5927\u8def\u5f84\u548c\uff0c\u82e5\u4e3a\u8d1f\u6570\u5219\u820d\u5f03\uff0c\u53d60\n            right_sum = max(maxPathSumHelper(node.right), 0)\n\n            # \u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\uff0c\u5305\u62ec\u4e09\u79cd\u60c5\u51b5\n            # 1. \u53ea\u53d6\u5f53\u524d\u8282\u70b9\u7684\u503c\n            # 2. \u53d6\u5f53\u524d\u8282\u70b9\u7684\u503c\u52a0\u4e0a\u5de6\u5b50\u6811\u8def\u5f84\u548c\n            # 3. \u53d6\u5f53\u524d\u8282\u70b9\u7684\u503c\u52a0\u4e0a\u53f3\u5b50\u6811\u8def\u5f84\u548c\n            current_sum = node.val + left_sum + right_sum\n\n            # \u66f4\u65b0\u6700\u5927\u8def\u5f84\u548c\u7684\u503c\n            self.max_sum = max(self.max_sum, current_sum)\n\n            # \u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u6700\u5927\u8def\u5f84\u548c\uff08\u53ea\u80fd\u53d6\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u8def\u5f84\u548c\u7684\u60c5\u51b5\uff09\n            return node.val + max(left_sum, right_sum)\n\n        # \u8c03\u7528\u8f85\u52a9\u51fd\u6570\u8fdb\u884c\u9012\u5f52\u8ba1\u7b97\n        maxPathSumHelper(root)\n\n        return self.max_sum\n")),(0,l.kt)("h3",{id:"235-\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root: return\n        if not root or root == p or root == q: return root\n        if root.val > p.val and root.val > q.val:\n            return self.lowestCommonAncestor(root.left,p,q)\n        elif root.val < p.val and root.val < q.val:\n            return self.lowestCommonAncestor(root.right,p,q)\n        else:\n            return root\n    \n    # \u4e8c\u53c9\u6811\u901a\u7528\u89e3\u6cd5\n    def s1(self, root, p, q):\n        if not root: return None\n        if root == p or root == q: return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        if not left:\n            return right\n        if not right:\n            return left\n        return None\n")),(0,l.kt)("h3",{id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root: return root\n        if root == p or root == q: return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        # \u5de6\u5b50\u6811\u3001\u53f3\u5b50\u6811\u90fd\u80fd\u627e\u5230\u7ed3\u679c\uff0c\u516c\u5171\u7956\u5148\u4e3a root\n        if left != None and right != None:\n            return root\n        # \u5de6\u5b50\u6811\u627e\u5230\u7ed3\u679c\uff0c\u516c\u5171\u7956\u5148 left\n        elif left != None:\n            return left\n        # \u53f3\u5b50\u6811\u627e\u5230\u7ed3\u679c\uff0c\u516c\u5171\u7956\u5148 right\n        elif right != None:\n            return right\n        # \u6ca1\u627e\u5230\uff0c\u8fd4\u56de None\n        return None\n")),(0,l.kt)("h3",{id:"\u5251\u6307-offer-09-\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},"\u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"class CQueue:\n\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n\n    def appendTail(self, value: int) -> None:\n        self.stack1.append(value)\n\n    def deleteHead(self) -> int:\n        if len(self.stack2) == 0:\n            if len(self.stack1) == 0:\n                return -1\n            else:\n                while self.stack1:\n                    self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n")),(0,l.kt)("h3",{id:"56-\u5408\u5e76\u533a\u95f4"},"56. \u5408\u5e76\u533a\u95f4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        intervals.sort(key=lambda x: x[0])\n\n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        return merged\n")),(0,l.kt)("h3",{id:"54-\u87ba\u65cb\u77e9\u9635"},"54. \u87ba\u65cb\u77e9\u9635"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# Time: O(N) Space: O(1)\ndef spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        if not matrix or not matrix[0]:\n            return []\n    \n        m, n = len(matrix), len(matrix[0])\n        top, bottom, left, right = 0, m - 1, 0, n - 1\n        direction = 0\n        result = []\n        \n        while top <= bottom and left <= right:\n            if direction == 0:  # \u5411\u53f3\n                for i in range(left, right + 1):\n                    result.append(matrix[top][i])\n                top += 1\n            elif direction == 1:  # \u5411\u4e0b\n                for i in range(top, bottom + 1):\n                    result.append(matrix[i][right])\n                right -= 1\n            elif direction == 2:  # \u5411\u5de6\n                for i in range(right, left - 1, -1):\n                    result.append(matrix[bottom][i])\n                bottom -= 1\n            else:  # \u5411\u4e0a\n                for i in range(bottom, top - 1, -1):\n                    result.append(matrix[i][left])\n                left += 1\n            \n            direction = (direction + 1) % 4\n        \n        return result\n")))}m.isMDXComponent=!0}}]);