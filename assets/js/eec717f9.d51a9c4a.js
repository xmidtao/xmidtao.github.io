"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[8429],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return p}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=u(t),p=l,f=d["".concat(o,".").concat(p)]||d[p]||c[p]||a;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function p(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6134:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return m},default:function(){return d}});var r=t(3117),l=t(102),a=(t(7294),t(3905)),i=["components"],s={id:"realbank",title:"\u5b9e\u6218\u5e93",sidebar_label:"\u5b9e\u6218\u5e93",slug:"/algorithm/realbank",description:"\u5b9e\u6218\u5e93\u3002",image:"img/meta.png"},o=void 0,u={unversionedId:"algorithm/realbank",id:"algorithm/realbank",title:"\u5b9e\u6218\u5e93",description:"\u5b9e\u6218\u5e93\u3002",source:"@site/docs/algorithm/RealBank.md",sourceDirName:"algorithm",slug:"/algorithm/realbank",permalink:"/docs/algorithm/realbank",editUrl:"https://github.com/xmidtao/documentation/tree/main/docs/algorithm/RealBank.md",tags:[],version:"current",lastUpdatedAt:1690168210,formattedLastUpdatedAt:"7/24/2023",frontMatter:{id:"realbank",title:"\u5b9e\u6218\u5e93",sidebar_label:"\u5b9e\u6218\u5e93",slug:"/algorithm/realbank",description:"\u5b9e\u6218\u5e93\u3002",image:"img/meta.png"},sidebar:"docs",previous:{title:"\u523b\u7ec3\u5e932",permalink:"/docs/algorithm/testbank2"},next:{title:"\u7b80\u4ecb",permalink:"/docs/database/introduction"}},m=[{value:"\u9898\u76ee",id:"\u9898\u76ee",children:[{value:"1. \u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\u6570\u7ec4\u4e2d\uff0c\u5feb\u901f\u5220\u9664\u67d0\u4e2a\u503c\uff0c\u5b58\u5728\u91cd\u590d\u503c  \u4e2d\u7b49",id:"1-\u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\u6570\u7ec4\u4e2d\u5feb\u901f\u5220\u9664\u67d0\u4e2a\u503c\u5b58\u5728\u91cd\u590d\u503c--\u4e2d\u7b49",children:[],level:3},{value:"86. \u5206\u9694\u94fe\u8868 \u4e2d\u7b49",id:"86-\u5206\u9694\u94fe\u8868-\u4e2d\u7b49",children:[],level:3},{value:"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u4e2d\u7b49",id:"215-\u6570\u7ec4\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20-\u4e2d\u7b49",children:[],level:3},{value:"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868 \u56f0\u96be",id:"23-\u5408\u5e76-k-\u4e2a\u5347\u5e8f\u94fe\u8868-\u56f0\u96be",children:[],level:3}],level:2}],c={toc:m};function d(e){var n=e.components,t=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("h3",{id:"1-\u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\u6570\u7ec4\u4e2d\u5feb\u901f\u5220\u9664\u67d0\u4e2a\u503c\u5b58\u5728\u91cd\u590d\u503c--\u4e2d\u7b49"},"1. \u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\u6570\u7ec4\u4e2d\uff0c\u5feb\u901f\u5220\u9664\u67d0\u4e2a\u503c\uff0c\u5b58\u5728\u91cd\u590d\u503c  \u4e2d\u7b49"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solutions:\n    def __init__(self) -> None:\n        pass\n\n    def fastDelNumber(self, nums, target):\n        # \u53cc\u6307\u9488 left, right\n        # Time: O(N) Space: O(1)\n        n = len(nums) - 1\n        left, right = 0, n\n        count = 0\n        while left <= right:\n            # right \u6307\u5411 \u975e target \u4e0b\u6807\n            while nums[right] == target:\n                right -= 1\n                count += 1\n            if nums[left] == target:            \n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n                count += 1\n            left += 1\n            right -= 1\n        return nums[:n - count]\n\n    def s1(self, nums, target):\n        if not nums: return nums\n        # \u6392\u5e8f + \u4e8c\u5206\u67e5\u627e:\n        # Time: O(logK) + O(logN) Space: O(1)\n        nums.sort()\n        n = len(nums) - 1\n        start = end = 0\n        left, right = 0, n\n        while left <= right:\n            mid = left + (right - left)//2\n            if nums[mid] == target:\n                start = end = mid\n                # \u5de6\u53f3\u5b9a\u4f4d\u503c\u8303\u56f4\n                while start > 0 and nums[start] == nums[start - 1]:\n                    start -= 1\n                while end < n and nums[end] == nums[end + 1]:\n                    end += 1\n                return nums[:start + 1] + nums[end:]\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return nums\n")),(0,a.kt)("h3",{id:"86-\u5206\u9694\u94fe\u8868-\u4e2d\u7b49"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.cn/problems/partition-list/"},"86. \u5206\u9694\u94fe\u8868")," \u4e2d\u7b49"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        # O(n) O(1)\n        # \u521b\u5efa\u4e24\u4e2a\u5934\u7ed3\u70b9\uff0c\u7528\u4e8e\u5b58\u653e\u5c0f\u4e8e x \u7b49\u4e8e\u6216\u5927\u4e8e x \u7684\u8282\u70b9\n        dummy1 = ListNode()\n        dummy2 = ListNode()\n        \n        # \u521b\u5efa\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u4e24\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\n        smaller = dummy1\n        greater = dummy2\n        \n        cur = head\n        while cur:\n            if cur.val < x:\n                smaller.next = cur\n                smaller = smaller.next\n            else:\n                greater.next = cur\n                greater = greater.next\n                \n            cur = cur.next\n        # \u5c06\u5c0f\u4e8e x \u7684\u8282\u70b9\u90e8\u5206\u7684\u5c3e\u8282\u70b9\u8fde\u63a5\u5230\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u90e8\u5206\u7684\u5934\u8282\u70b9\n        smaller.next = dummy2.next \n        # \u5c06\u5927\u4e8e\u6216\u7b49\u4e8e x \u7684\u8282\u70b9\u90e8\u5206\u7684\u5c3e\u8282\u70b9\u7684 next \u7f6e\u4e3a None\uff0c\u8868\u793a\u94fe\u8868\u7ed3\u675f\n        greater.next = None\n\n        # \u8fd4\u56de\u91cd\u65b0\u6392\u5217\u540e\u7684\u94fe\u8868\u7684\u5934\u8282\u70b9\n        return dummy1.next\n")),(0,a.kt)("h3",{id:"215-\u6570\u7ec4\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20-\u4e2d\u7b49"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.cn/problems/kth-largest-element-in-an-array/"},"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20")," \u4e2d\u7b49"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# \u65e0\u5e8f\u6570\u7ec4\u627e\u7b2c K \u5927\u7684\u6570\uff0c\u8981\u6c42\uff1a1. \u590d\u6742\u5ea6\u81f3\u5c11O(NlogN)\nimport heapq\n\nclass Slutions:\n    def largestK(nums, k):\n        heap = []\n        # \u5c0f\u9876\u5806 O(Nlogk)\uff0c\n        for num in nums:\n            # \u5165\u6808\n            heapq.heappush(heap, num)\n            if len(heap) > k:\n                # \u6700\u5c0f\u503c\u51fa\u6808\n                heapq.heappop(heap)\n        print(heap[0])\n        return heap[0]\n")),(0,a.kt)("h3",{id:"23-\u5408\u5e76-k-\u4e2a\u5347\u5e8f\u94fe\u8868-\u56f0\u96be"},(0,a.kt)("a",{parentName:"h3",href:"https://leetcode.cn/problems/merge-k-sorted-lists/"},"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868")," \u56f0\u96be"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        def mergeList(l1, l2):\n            if not l1: return l2\n            if not l2: return l1\n            dummy = ListNode(0)\n            curr = dummy\n            while l1 and l2:\n                if l1.val <= l2.val:\n                    curr.next = l1\n                    l1 = l1.next\n                else:\n                    curr.next = l2\n                    l2 = l2.next\n                curr = curr.next\n            # \u5269\u4f59\u94fe\u8868\u63a5\u5230\u5c3e\u90e8\n            curr.next = l1 if l1 else l2\n            return dummy.next\n\n        n = len(lists)\n        if n == 0:\n            return None\n        if n == 1:\n            return lists[0]\n        if n == 2:\n            return mergeList(lists[0], lists[1])\n\n        left = lists[:n//2]\n        right = lists[n//2:]\n\n        return mergeList(self.mergeKLists(left), self.mergeKLists(right))\n")))}d.isMDXComponent=!0}}]);