"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[1569],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3437:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),o=["components"],i={id:"hooks",title:"React Hooks",sidebar_label:"React Hooks",slug:"/react/hooks"},s=void 0,p={unversionedId:"packages/react/api/hooks",id:"packages/react/api/hooks",title:"React Hooks",description:"React Hooks are only supported in Functional React Components!",source:"@site/docs/packages/react/api/Hooks.md",sourceDirName:"packages/react/api",slug:"/react/hooks",permalink:"/docs/react/hooks",editUrl:"https://github.com/xmidtao/documentation/tree/main/docs/packages/react/api/Hooks.md",tags:[],version:"current",lastUpdatedAt:1689181374,formattedLastUpdatedAt:"7/12/2023",frontMatter:{id:"hooks",title:"React Hooks",sidebar_label:"React Hooks",slug:"/react/hooks"},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/react/installation"},next:{title:"AgileHOC",permalink:"/docs/react/AgileHOC"}},c=[{value:"<code>useAgile()</code>",id:"useagile",children:[{value:"\ud83d\udcda Array",id:"-array",children:[],level:3},{value:"\ud83d\udc40 Subscribable Instances",id:"-subscribable-instances",children:[],level:3},{value:"\ud83d\udd34 Example",id:"-example",children:[],level:3},{value:"\ud83d\udfe6 Typescript",id:"-typescript",children:[],level:3},{value:"\ud83d\udced Props",id:"-props",children:[{value:"SubscribableAgileInstancesType",id:"subscribableagileinstancestype",children:[],level:4}],level:3},{value:"\ud83d\udcc4 Return",id:"-return",children:[],level:3}],level:2},{value:"<code>useProxy()</code>",id:"useproxy",children:[{value:"\ud83d\udc40 Subscribable Instances",id:"-subscribable-instances-1",children:[],level:3},{value:"\ud83d\udd34 Example",id:"-example-1",children:[],level:3},{value:"\ud83d\udfe6 Typescript",id:"-typescript-1",children:[],level:3},{value:"\ud83d\udced Props",id:"-props-1",children:[{value:"SubscribableAgileInstancesType",id:"subscribableagileinstancestype-1",children:[],level:4}],level:3},{value:"\ud83d\udcc4 Return",id:"-return-1",children:[],level:3}],level:2},{value:"<code>useSelector()</code>",id:"useselector",children:[{value:"\ud83d\udc40 Subscribable Instances",id:"-subscribable-instances-2",children:[],level:3},{value:"\ud83d\udd34 Example",id:"-example-2",children:[],level:3},{value:"\ud83d\udfe6 Typescript",id:"-typescript-2",children:[],level:3},{value:"\ud83d\udced Props",id:"-props-2",children:[{value:"SubscribableAgileInstancesType",id:"subscribableagileinstancestype-2",children:[],level:4},{value:"SelectorMethodType",id:"selectormethodtype",children:[],level:4}],level:3},{value:"\ud83d\udcc4 Return",id:"-return-2",children:[],level:3}],level:2},{value:"<code>useValue()</code>",id:"usevalue",children:[{value:"\ud83d\udc40 Subscribable Instances",id:"-subscribable-instances-3",children:[],level:3},{value:"\ud83d\udd34 Example",id:"-example-3",children:[],level:3},{value:"\ud83d\udfe6 Typescript",id:"-typescript-3",children:[],level:3},{value:"\ud83d\udced Props",id:"-props-3",children:[{value:"SubscribableAgileInstancesType",id:"subscribableagileinstancestype-3",children:[],level:4}],level:3},{value:"\ud83d\udcc4 Return",id:"-return-3",children:[],level:3}],level:2},{value:"<code>useWatcher()</code>",id:"usewatcher",children:[{value:"\ud83d\udd34 Example",id:"-example-4",children:[],level:3},{value:"\ud83d\udfe6 Typescript",id:"-typescript-4",children:[],level:3},{value:"\ud83d\udced Props",id:"-props-4",children:[],level:3},{value:"\ud83d\udcc4 Return",id:"-return-4",children:[],level:3}],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},"\u2139\ufe0f"),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-intro.html"},"React Hooks")," are only supported in ",(0,l.kt)("strong",{parentName:"p"},"Functional React Components"),"!"))),(0,l.kt)("h2",{id:"useagile"},(0,l.kt)("inlineCode",{parentName:"h2"},"useAgile()")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," React Hook binds/subscribes AgileTs States to a Functional React Component for reactivity.\nThis binding ensures that the Component re-renders whenever a bound State changes.\nWe can flexibly bind any ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instances"),"\n(like States or Collections) to any React Component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const myCoolState = useAgile(MY_COOL_STATE); \n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook returns the current ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," of the provided State\nand ",(0,l.kt)("strong",{parentName:"p"},"not")," the State Instance itself."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7}","{7}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_STATE = createState('jeff');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myState = useAgile(MY_STATE);\nconsole.log(myState); // Returns 'jeff'\n")),(0,l.kt)("h3",{id:"-array"},"\ud83d\udcda Array"),(0,l.kt)("p",null,"We can also pass an array of States to the ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"useAgile([MY_COOL_STATE1, MY_COOL_STATE2]);\n")),(0,l.kt)("p",null,"Then ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," returns an array of State ",(0,l.kt)("inlineCode",{parentName:"p"},"values")," matching the specified State Instances.\nThis array can be destructured in order to easily access the individual State values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{8}","{8}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_STATE = createState('jeff');\nconst MY_STATE_2 = createState('frank');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst [myState, myState2] = useAgile([MY_STATE, MY_STATE_2]);\nconsole.log(myState); // Returns 'jeff'\nconsole.log(myState2); // Returns 'frank'\n")),(0,l.kt)("p",null,"Binding multiple States to a React Component using a single ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook has one advantage.\nIt can reduce the number of triggered re-render events by batching re-render jobs.\nThereby, simultaneously triggered re-render events of different State Instances\nare combined into one single (combined) re-render event\nif these States share the same ",(0,l.kt)("inlineCode",{parentName:"p"},"Subscription Container"),".\nEach ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook creates its own ",(0,l.kt)("inlineCode",{parentName:"p"},"Subscription Container")," and registers it with AgileTs.\nSimply put ",(0,l.kt)("inlineCode",{parentName:"p"},"Subscription Container")," serve as an interface to React-Components for AgileTs."),(0,l.kt)("h3",{id:"-subscribable-instances"},"\ud83d\udc40 Subscribable Instances"),(0,l.kt)("p",null,"Not only AgileTs States can be bound to React Components via ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()"),",\nbut also all other ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instances"),"\nthat contain an ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#observer"},(0,l.kt)("inlineCode",{parentName:"a"},"Observer")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"  const [myCollection, myGroup, myState] = useAgile([MY_COLLECTION, MY_GROUP, MY_STATE]);\n")),(0,l.kt)("p",null,"Instances that contain an ",(0,l.kt)("inlineCode",{parentName:"p"},"Observer")," are, for example:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"state"},(0,l.kt)("a",{parentName:"h3",href:"/docs/core/state"},(0,l.kt)("inlineCode",{parentName:"a"},"State"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7}","{7}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_STATE = createState('jeff');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myState = useAgile(MY_STATE);\nconsole.log(myState); // Returns 'jeff'\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"computed"},(0,l.kt)("a",{parentName:"h3",href:"/docs/core/computed"},(0,l.kt)("inlineCode",{parentName:"a"},"Computed"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7}","{7}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_COMPUTED = createComputed(() => 'hello there');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myComputed = useAgile(MY_COMPUTED);\nconsole.log(myComputed); // Returns 'hello there'\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"collection"},(0,l.kt)("a",{parentName:"h3",href:"/docs/core/collection"},(0,l.kt)("inlineCode",{parentName:"a"},"Collection"))),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Note:")," A Collection doesn't contain directly an ",(0,l.kt)("inlineCode",{parentName:"p"},"Observer"),".\nBut ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," is smart enough, to identify a Collection\nand binds the ",(0,l.kt)("a",{parentName:"p",href:"/docs/core/collection/group#-default-group"},(0,l.kt)("inlineCode",{parentName:"a"},"defualt")," Group"),"\nto the React Component instead.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," Group represents the default pattern of the Collection."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{9}","{9}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_COLLECTION = createCollection({\n   initialData: [{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 3, name: 'c'}]  \n});\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myCollection = useAgile(MY_COLLECTION);\nconsole.log(myCollection); // Returns (see below)\n// '[{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 3, name: 'c'}]'\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"group"},(0,l.kt)("a",{parentName:"h3",href:"/docs/core/collection/group"},(0,l.kt)("inlineCode",{parentName:"a"},"Group"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{10}","{10}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_COLLECTION = createCollection({\n   initialData: [{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 3, name: 'c'}]  \n});\nconst MY_GROUP = MY_COLLECTION.createGroup('myGroup', [3, 1]);\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myGroup = useAgile(MY_GROUP);\nconsole.log(myGroup); // Returns '[{id: 3, name: 'c'}, {id: 1, name: 'a'}]'\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"selector"},(0,l.kt)("a",{parentName:"h3",href:"/docs/core/collection/selector"},(0,l.kt)("inlineCode",{parentName:"a"},"Selector"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{10}","{10}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_COLLECTION = createCollection({\n   initialData: [{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 3, name: 'c'}]  \n});\nconst MY_SELECTOR = MY_COLLECTION.select(2);\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst mySelector = useAgile(MY_SELECTOR);\nconsole.log(mySelector); // Returns '{id: 2, name: 'b'}'\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"item"},(0,l.kt)("a",{parentName:"h3",href:"/docs/core/collection#-item"},(0,l.kt)("inlineCode",{parentName:"a"},"Item"))),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{10}","{10}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_COLLECTION = createCollection({\n   initialData: [{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 3, name: 'c'}]  \n});\nconst MY_ITEM = MY_COLLECTION.getItem(3);\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myItem = useAgile(MY_ITEM);\nconsole.log(myItem); // Returns '{id: 3, name: 'c'}'\n")))),(0,l.kt)("h3",{id:"-example"},"\ud83d\udd34 Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'const MY_STATE = createState("Hello Stranger!");\n\nconst RandomComponent = () => {\n  // \ud83d\udc47 Bind MY_STATE to \'RandomComponent\' for reactivity\n  const myFirstState = useAgile(MY_STATE);\n\n  return (\n          <div>\n            <p>{myFirstState}</p>\n            <button\n                    onClick={() => {\n                      MY_STATE.set("Hello Friend!");\n                    }}\n            >\n              Update State\n            </button>\n          </div>\n  );\n}\n\nrender(<RandomComponent/>);\n')),(0,l.kt)("h3",{id:"-typescript"},"\ud83d\udfe6 Typescript"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook is almost 100% typesafe."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{8}","{8}":!0},"// -- core.js --------------------------------------------------\n\nconst NUMBER_STATE = createState(0);\nconst STRING_STATE = createState('hello there');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst [numberState, stringState] = useAgile([NUMBER_STATE, STRING_STATE]);\nconsole.log(typeof numberState); // Returns 'number'\nconsole.log(typeof stringState); // Returns 'string'\n")),(0,l.kt)("h3",{id:"-props"},"\ud83d\udced Props"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Prop"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deps")),(0,l.kt)("td",{parentName:"tr",align:null},"Array<SubscribableAgileInstancesType",">"," ","|"," SubscribableAgileInstancesType"),(0,l.kt)("td",{parentName:"tr",align:null},"Agile Sub Instances to be bound to the Functional Component."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"config")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/interfaces#agilehookconfiginterface"},"AgileHookConfigInterface")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("h4",{id:"subscribableagileinstancestype"},"SubscribableAgileInstancesType"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type SubscribableAgileInstancesType = State | Collection | Observer | undefined;\n")),(0,l.kt)("h3",{id:"-return"},"\ud83d\udcc4 Return"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook returns the current ",(0,l.kt)("inlineCode",{parentName:"p"},"output"),"\nor if the Instance has no ",(0,l.kt)("inlineCode",{parentName:"p"},"output")," the current ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),"\nof the specified ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instance"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7}","{7}":!0},"// -- core.js -------------------------------------------------\n\nconst MY_STATE = createState('jeff');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myState = useAgile(MY_STATE);\nconsole.log(myState); // Returns 'jeff'\n")),(0,l.kt)("p",null,"When passing multiple Agile Sub Instances,\nan array of ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"values")," matching the passed Instances is returned."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{8}","{8}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_STATE = createState('jeff');\nconst MY_STATE_2 = createState('frank');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst [myState, myState2] = useAgile([MY_STATE, MY_STATE_2]);\nconsole.log(myState); // Returns 'jeff'\nconsole.log(myState2); // Returns 'frank'\n")),(0,l.kt)("br",null),(0,l.kt)("hr",null),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"useproxy"},(0,l.kt)("inlineCode",{parentName:"h2"},"useProxy()")),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udd25"),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Requires an additional package called ",(0,l.kt)("inlineCode",{parentName:"p"},"@agile-ts/proxytree"),"!"))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useProxy()")," is in its basic functionality equivalent to the ",(0,l.kt)("a",{parentName:"p",href:"#useagile"},(0,l.kt)("inlineCode",{parentName:"a"},"useAgile()"))," Hook.\nIt binds/subscribes AgileTs States to a Functional React Component for reactivity.\nHowever, it has one advantage in terms of performance.\nBecause it only re-renders the React Component when an actual accessed property changes.\nThis is accomplished by warping a ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"},"Proxy()"),"\naround the returned State value object/s.\nThrough this Proxy, AgileTs is able to exactly track accessed properties in the React Component\nand can construct paths to these. Based on these paths, it can select the particular accessed properties."),(0,l.kt)("p",null,"With the ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook, the Component would always be re-rendered on a subscribed State value change,\nregardless of whether the changed property value was accessed in the Component or not."),(0,l.kt)("h3",{id:"-subscribable-instances-1"},"\ud83d\udc40 Subscribable Instances"),(0,l.kt)("p",null,"Not only AgileTs States can be bound to React Components via ",(0,l.kt)("inlineCode",{parentName:"p"},"useProxy()"),",\nbut also all other ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instances"),"\nthat contain an ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#observer"},(0,l.kt)("inlineCode",{parentName:"a"},"Observer")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"  const [myCollection, myGroup, myState] = useProxy([MY_COLLECTION, MY_GROUP, MY_STATE]);\n")),(0,l.kt)("p",null,"However, a ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"},"Javascript Proxy"),"\ncan only be wrapped around values of the type ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),".\nInstances that are not of the type object are treated as in ",(0,l.kt)("a",{parentName:"p",href:"#useagile"},(0,l.kt)("inlineCode",{parentName:"a"},"useAgile()")),"."),(0,l.kt)("h3",{id:"-example-1"},"\ud83d\udd34 Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"const MY_STATE = createState({name: 'jeff', location: 'Germany', age: 19}, {key: 'myState'});\n\nlet rerenderCount = 0;\n\nconst RandomComponent = () => {\n  // \ud83d\udc47 Bind MY_STATE to 'RandomComponent' for reactivity\n  const myState = useProxy(MY_STATE);\n\n  rerenderCount++;\n\n  return (\n          <div>\n            <p>Name: {myState.name}</p>\n            <p>Rerender Count: {rerenderCount}</p>\n            <p>State Value (not subscribed): <br/> {JSON.stringify(MY_STATE.value)}</p>\n            <button\n                    onClick={() => {\n                      MY_STATE.patch({name: generateId()})\n                    }}\n            >\n              Update Name (accessed)\n            </button>\n            <button\n                    onClick={() => {\n                      MY_STATE.patch({location: generateId()})\n                    }}\n            >\n              Update Location\n            </button>\n          </div>\n  );\n}\n\nrender(<RandomComponent/>);\n")),(0,l.kt)("h3",{id:"-typescript-1"},"\ud83d\udfe6 Typescript"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useProxy()")," Hook is almost 100% typesafe."),(0,l.kt)("h3",{id:"-props-1"},"\ud83d\udced Props"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Prop"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deps")),(0,l.kt)("td",{parentName:"tr",align:null},"Array<SubscribableAgileInstancesType",">"," ","|"," SubscribableAgileInstancesType"),(0,l.kt)("td",{parentName:"tr",align:null},"Agile Sub Instances to be bound to the Functional Component."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"config")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/interfaces#agilehookconfiginterface"},"AgileHookConfigInterface")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("h4",{id:"subscribableagileinstancestype-1"},"SubscribableAgileInstancesType"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type SubscribableAgileInstancesType = State | Collection | Observer | undefined;\n")),(0,l.kt)("h3",{id:"-return-1"},"\ud83d\udcc4 Return"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useProxy()")," Hook returns the current ",(0,l.kt)("inlineCode",{parentName:"p"},"output"),"\nor if the Instance has no ",(0,l.kt)("inlineCode",{parentName:"p"},"output")," the current ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),"\nof the specified ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instance"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7}","{7}":!0},"// -- core.js -------------------------------------------------\n\nconst MY_STATE = createState('jeff');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myState = useProxy(MY_STATE);\nconsole.log(myState); // Returns 'jeff'\n")),(0,l.kt)("p",null,"When passing multiple Agile Sub Instances,\nan array of ",(0,l.kt)("inlineCode",{parentName:"p"},"outputs"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"values")," matching the passed Instances is returned."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{8}","{8}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_STATE = createState({id: 1: name: 'jeff'});\nconst MY_STATE_2 = createState('frank');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst [myState, myState2] = useProxy([MY_STATE, MY_STATE_2]);\nconsole.log(myState); // Returns '{id: 1: name: 'jeff'}'\nconsole.log(myState2); // Returns 'frank'\n")),(0,l.kt)("br",null),(0,l.kt)("hr",null),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"useselector"},(0,l.kt)("inlineCode",{parentName:"h2"},"useSelector()")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useSelector()")," React Hook binds/subscribes a ",(0,l.kt)("strong",{parentName:"p"},"part"),"\nof an AgileTs State to a Functional React Component for reactivity.\nThis binding ensures that the Component re-renders whenever the bound State ",(0,l.kt)("strong",{parentName:"p"},"part/property")," changes.\nThe to bind part is selected via a selector function specified as second parameter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const myName = useAgile(MY_USER, (v) => v.name); \n")),(0,l.kt)("h3",{id:"-subscribable-instances-2"},"\ud83d\udc40 Subscribable Instances"),(0,l.kt)("p",null,"Not only parts of AgileTs States can be bound to React Components via ",(0,l.kt)("inlineCode",{parentName:"p"},"useSelector()"),",\nbut also parts of all other ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instances"),"\nthat contain an ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#observer"},(0,l.kt)("inlineCode",{parentName:"a"},"Observer")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const myItem1 = useSelector(MY_COLLECTION, (v) => v['item1']);\n")),(0,l.kt)("h3",{id:"-example-2"},"\ud83d\udd34 Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"const MY_STATE = createState({name: 'jeff', location: 'Germany', age: 19}, {key: 'myState'});\n\nlet rerenderCount = 0;\n\nconst RandomComponent = () => {\n  // \ud83d\udc47 Bind name property of MY_STATE to 'RandomComponent' for reactivity\n  const name = useSelector(MY_STATE, (v) => v.name);\n\n  rerenderCount++;\n\n  return (\n          <div>\n            <p>Name: {name}</p>\n            <p>Rerender Count: {rerenderCount}</p>\n            <p>State Value (not subscribed): <br/> {JSON.stringify(MY_STATE.value)}</p>\n            <button\n                    onClick={() => {\n                      MY_STATE.patch({name: generateId()})\n                    }}\n            >\n              Update Name (selected)\n            </button>\n            <button\n                    onClick={() => {\n                      MY_STATE.patch({location: generateId()})\n                    }}\n            >\n              Update Location\n            </button>\n          </div>\n  );\n}\n\nrender(<RandomComponent/>);\n")),(0,l.kt)("h3",{id:"-typescript-2"},"\ud83d\udfe6 Typescript"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useSelector()")," Hook isn't completely typesafe yet."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const selectedValue = useSelector(MY_STATE, (v) => v.name);\n")),(0,l.kt)("p",null,"We are still figuring out how to automatically detect and return the selected property type.\nAs an override, you can also specify the individual types as generics."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"useSelector<typeof MY_STATE.value, string>(MY_STATE, (v) => v.name);\n")),(0,l.kt)("p",null,"Or explicitly assign the desired type to the return value with the ",(0,l.kt)("inlineCode",{parentName:"p"},"as")," keyword."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"useSelector(MY_STATE, (v) => v.name) as string;\n")),(0,l.kt)("h3",{id:"-props-2"},"\ud83d\udced Props"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Prop"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"dep")),(0,l.kt)("td",{parentName:"tr",align:null},"SubscribableAgileInstancesType"),(0,l.kt)("td",{parentName:"tr",align:null},"Agile Sub Instance to be passed into the specified selector method."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"selector")),(0,l.kt)("td",{parentName:"tr",align:null},"SelectorMethodType"),(0,l.kt)("td",{parentName:"tr",align:null},"Selector method to select the part/property of the specified Agile Sub Instance value to be bound to the Functional Component."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"config")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/interfaces#agilehookconfiginterface"},"AgileHookConfigInterface")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("h4",{id:"subscribableagileinstancestype-2"},"SubscribableAgileInstancesType"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type SubscribableAgileInstancesType = State | Collection | Observer | undefined;\n")),(0,l.kt)("h4",{id:"selectormethodtype"},"SelectorMethodType"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type SelectorMethodType<T = any> = (value: T) => any;\n")),(0,l.kt)("h3",{id:"-return-2"},"\ud83d\udcc4 Return"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useSelector()")," Hook returns the selected property (based on the selector method)\nof the specified ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instance"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{7}","{7}":!0},"// -- core.js -------------------------------------------------\n\nconst MY_STATE = createState({id: 10, name: 'jeff', age: 10});\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myName = useSelector(MY_STATE, (v) => v.name);\nconsole.log(myName); // Returns 'jeff'\n")),(0,l.kt)("br",null),(0,l.kt)("hr",null),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"usevalue"},(0,l.kt)("inlineCode",{parentName:"h2"},"useValue()")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useValue()")," is in its basic functionality equivalent to the ",(0,l.kt)("a",{parentName:"p",href:"#useagile"},(0,l.kt)("inlineCode",{parentName:"a"},"useAgile()"))," Hook.\nIt binds/subscribes AgileTs States to a Functional React Component for reactivity.\nHowever, it differs in on key area,\nbecause it explicitly binds the ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," of a State or other ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instances"),"\nto the Component instead of preferring the ",(0,l.kt)("inlineCode",{parentName:"p"},"ouptut"),". Normally (like in the ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook),\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"output")," of an Agile Sub Instance has a higher weight than the ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,l.kt)("p",null,"For example if we bind a Collection with the ",(0,l.kt)("inlineCode",{parentName:"p"},"useAgile()")," Hook to a React Component,\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"output")," of the Collection is bound to the Component.\nWhen we use the ",(0,l.kt)("inlineCode",{parentName:"p"},"useValue()")," Hook instead, the ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," of the Collection is bound to the Component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{9,12}","{9,12}":!0},"// -- core.js -------------------------------------------------\n\n const MY_COLLECTION = createCollection({\n  initialData: [{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 3, name: 'c'}]\n});\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst collectionValue = useValue(MY_COLLECTION);\nconsole.log(collectionValue); // Returns '[1, 2, 3]'\n\nconst collectionOutput = useAgile(MY_COLLECTION);\nconsole.log(collectionOutput); // Returns (see below)\n// '[{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 3, name: 'c'}]'\n")),(0,l.kt)("h3",{id:"-subscribable-instances-3"},"\ud83d\udc40 Subscribable Instances"),(0,l.kt)("p",null,"Not only AgileTs States can be bound to React Components via ",(0,l.kt)("inlineCode",{parentName:"p"},"useValue()"),",\nbut also all other ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instances"),"\nthat contain an ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#observer"},(0,l.kt)("inlineCode",{parentName:"a"},"Observer")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"  const [myCollection, myGroup, myState] = useValue([MY_COLLECTION, MY_GROUP, MY_STATE]);\n")),(0,l.kt)("h3",{id:"-example-3"},"\ud83d\udd34 Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"const MY_COLLECTION = createCollection({initialData: [\n    {id: 1, name: 'jeff'}, {id: 2, name: 'hans'}\n]});\n\nconst RandomComponent = () => {\n  // \ud83d\udc47 Bind the value of MY_COLLECTION to 'RandomComponent' for reactivity\n  const myCollectionValue = useValue(MY_COLLECTION);\n\n  // Bind the output of MY_COLLECTION to 'RandomComponent' for reactivity\n  const myCollectionOutput = useAgile(MY_COLLECTION);\n\n  return (\n          <div>\n            <p>Collection value: {JSON.stringify(myCollectionValue)}</p>\n            <p>Collection output: {JSON.stringify(myCollectionOutput)}</p>\n            <button\n                    onClick={() => {\n                      MY_COLLECTION.collect({id: generateId(), name: generateId(10)})\n                    }}\n            >\n              Collect random name\n            </button>\n          </div>\n  );\n}\n\nrender(<RandomComponent/>);\n")),(0,l.kt)("h3",{id:"-typescript-3"},"\ud83d\udfe6 Typescript"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useValue()")," Hook is almost 100% typesafe."),(0,l.kt)("h3",{id:"-props-3"},"\ud83d\udced Props"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Prop"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"deps")),(0,l.kt)("td",{parentName:"tr",align:null},"Array<SubscribableAgileInstancesType",">"," ","|"," SubscribableAgileInstancesType"),(0,l.kt)("td",{parentName:"tr",align:null},"Agile Sub Instances to be bound to the Functional Component."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"config")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/interfaces#agilehookconfiginterface"},"AgileHookConfigInterface")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("h4",{id:"subscribableagileinstancestype-3"},"SubscribableAgileInstancesType"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"type SubscribableAgileInstancesType = State | Collection | Observer | undefined;\n")),(0,l.kt)("h3",{id:"-return-3"},"\ud83d\udcc4 Return"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useValue()")," Hook returns the current ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),"\nof the specified ",(0,l.kt)("a",{parentName:"p",href:"/docs/introduction#agile-sub-instance"},"Agile Sub Instance"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{9}","{9}":!0},"// -- core.js -------------------------------------------------\n\nconst MY_COLLECTION = createCollection({initialData: [\n  {id: 1, name: 'jeff'}, {id: 2, name: 'hans'}\n]});\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst myValue = useValue(MY_COLLECTION);\nconsole.log(myValue); // Returns '[1, 2]'\n")),(0,l.kt)("p",null,"When passing multiple Agile Sub Instances,\nan array of ",(0,l.kt)("inlineCode",{parentName:"p"},"values")," matching the passed Instances is returned."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{10}","{10}":!0},"// -- core.js --------------------------------------------------\n\nconst MY_COLLECTION = createCollection({initialData: [\n  {id: 1, name: 'jeff'}, {id: 2, name: 'hans'}\n]});\nconst MY_STATE_2 = createState('frank');\n\n// -- MyComponent.jsx ------------------------------------------\n\nconst [myValue, myState2] = useValue([MY_COLLECTION, MY_STATE_2]);\nconsole.log(myValue); // Returns '[1, 2]'\nconsole.log(myState2); // Returns 'frank'\n")),(0,l.kt)("br",null),(0,l.kt)("hr",null),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"usewatcher"},(0,l.kt)("inlineCode",{parentName:"h2"},"useWatcher()")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useWatcher()")," React Hook lets us easily observe a State for changes.\nThereby is the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"callback")," function fired on every State ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," mutation.\nSuch mutation occurs when we, for example, update the State ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," from 'jeff' to 'hans'."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"useWatcher(MY_STATE, (value) => {\n  console.log(value); // Returns current State Value\n});\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useWatcher()")," Hook is a synonym to the ",(0,l.kt)("a",{parentName:"p",href:"/docs/core/state/methods#watch"},(0,l.kt)("inlineCode",{parentName:"a"},"watch()"))," method.\nHowever, it has some advantages within React Components:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It automatically cleans up the created watcher callback\nwhen the React Component unmounts"),(0,l.kt)("li",{parentName:"ul"},"Is nicer to read in 'UI-Component-Code'")),(0,l.kt)("h3",{id:"-example-4"},"\ud83d\udd34 Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'const MY_STATE = createState("hello");\n\nconst RandomComponent = () => {\n  useWatcher(MY_STATE, (value) => {\n    toast("New Value: " + value);\n  });\n\n  return (\n          <div>\n            <button\n                    onClick={() => {\n                      MY_STATE.set("bye");\n                    }}\n            >\n              Change State\n            </button>\n          </div>\n  );\n}\n\nrender(<RandomComponent/>);\n')),(0,l.kt)("h3",{id:"-typescript-4"},"\ud83d\udfe6 Typescript"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"useWatcher()")," Hook is almost 100% typesafe."),(0,l.kt)("h3",{id:"-props-4"},"\ud83d\udced Props"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Prop"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"state")),(0,l.kt)("td",{parentName:"tr",align:null},"State<T",">"),(0,l.kt)("td",{parentName:"tr",align:null},"State to which the specified watcher callback belongs."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"callback")),(0,l.kt)("td",{parentName:"tr",align:null},"StateWatcherCallback<T",">"),(0,l.kt)("td",{parentName:"tr",align:null},"A function to be executed on each State value change."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,l.kt)("h3",{id:"-return-4"},"\ud83d\udcc4 Return"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"void\n")))}d.isMDXComponent=!0}}]);